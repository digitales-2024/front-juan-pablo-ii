/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AdminController_getProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/update-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["AdminController_updatePassword"];
        trace?: never;
    };
    "/api/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_findAll"];
        put?: never;
        post: operations["UsersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_findOne"];
        put?: never;
        post?: never;
        delete: operations["UsersController_remove"];
        options?: never;
        head?: never;
        patch: operations["UsersController_update"];
        trace?: never;
    };
    "/api/v1/users/deactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["UsersController_deactivate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["UsersController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/users/reactivate/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["UsersController_reactivate"];
        trace?: never;
    };
    "/api/v1/users/generate-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UsersController_generatePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/send-new-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UsersController_sendNewPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rol": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["RolController_findAll"];
        put?: never;
        post: operations["RolController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rol/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["RolController_findOne"];
        put?: never;
        post?: never;
        delete: operations["RolController_remove"];
        options?: never;
        head?: never;
        patch: operations["RolController_update"];
        trace?: never;
    };
    "/api/v1/rol/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["RolController_removeAll"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rol/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["RolController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/rol/modules-permissions/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["RolController_findAllModulesPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuditController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/update-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_updatePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AuthController_verify"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head: operations["AuthController_verifyQuick"];
        patch?: never;
        trace?: never;
    };
    "/api/v1/modules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ModulesController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/modules/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ModulesController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PermissionsController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/permissions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PermissionsController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/seeds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["SeedsController_initSeed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las órdenes */
        get: operations["OrderController_findAll"];
        put?: never;
        /** Crear nueva orden */
        post: operations["OrderController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/order/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener orden por ID */
        get: operations["OrderController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar orden existente */
        patch: operations["OrderController_update"];
        trace?: never;
    };
    "/api/v1/order/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples órdenes */
        delete: operations["OrderController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/order/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples órdenes */
        patch: operations["OrderController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/order/{id}/submit-draft": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirmar orden borrador y cambiar a pendiente */
        post: operations["OrderController_submitDraftOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/order/type/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all orders by type */
        get: operations["OrderController_findAllByType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/order/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get payments by status */
        get: operations["OrderController_findByStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/order/{type}/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get orders by type and status */
        get: operations["OrderController_findByStatusType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los pagos */
        get: operations["PaymentController_findAll"];
        put?: never;
        /** Crear nuevo pago */
        post: operations["PaymentController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener pago por ID */
        get: operations["PaymentController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar pago existente */
        patch: operations["PaymentController_update"];
        trace?: never;
    };
    "/api/v1/payment/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples pagos */
        delete: operations["PaymentController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payment/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples pagos */
        patch: operations["PaymentController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/payment/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel a pending payment */
        post: operations["PaymentController_cancelPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payment/{id}/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Process a pending payment */
        post: operations["PaymentController_processPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payment/{id}/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify a processing payment */
        post: operations["PaymentController_verifyPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payment/{id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reject a processing payment */
        post: operations["PaymentController_rejectPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payment/{id}/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Process refund for a payment */
        post: operations["PaymentController_refundPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payment/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get payments by status and type */
        get: operations["PaymentController_findByStatusAndType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ClientsController_findAll"];
        put?: never;
        post: operations["ClientsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clients/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ClientsController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ClientsController_update"];
        trace?: never;
    };
    "/api/v1/clients/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["ClientsController_deactivate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clients/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ClientsController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los servicios */
        get: operations["ServiceController_findAll"];
        put?: never;
        /** Crear nuevo servicio */
        post: operations["ServiceController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/services/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener servicio por ID */
        get: operations["ServiceController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar servicio existente */
        patch: operations["ServiceController_update"];
        trace?: never;
    };
    "/api/v1/services/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples servicios */
        delete: operations["ServiceController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/services/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples servicios */
        patch: operations["ServiceController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/service-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los tipos de servicios */
        get: operations["ServiceTypeController_findAll"];
        put?: never;
        /** Crear nuevo tipo de servicio */
        post: operations["ServiceTypeController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service-types/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener tipo de servicio por ID */
        get: operations["ServiceTypeController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar tipo de servicio */
        patch: operations["ServiceTypeController_update"];
        trace?: never;
    };
    "/api/v1/service-types/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples tipos de servicios */
        delete: operations["ServiceTypeController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/service-types/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples tipos de servicios */
        patch: operations["ServiceTypeController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/branch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las sucursales */
        get: operations["BranchController_findAll"];
        put?: never;
        /** Crear nueva sucursal */
        post: operations["BranchController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/branch/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener sucursal por ID */
        get: operations["BranchController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar sucursal existente */
        patch: operations["BranchController_update"];
        trace?: never;
    };
    "/api/v1/branch/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples sucursales */
        delete: operations["BranchController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/branch/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples sucursales */
        patch: operations["BranchController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/appointment-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los tipos de cita */
        get: operations["AppointmentTypeController_findAll"];
        put?: never;
        /** Crear nuevo tipo de cita */
        post: operations["AppointmentTypeController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/appointment-types/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener tipo de cita por ID */
        get: operations["AppointmentTypeController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar tipo de cita */
        patch: operations["AppointmentTypeController_update"];
        trace?: never;
    };
    "/api/v1/appointment-types/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples tipos de citas */
        delete: operations["AppointmentTypeController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/appointments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las citas médicas */
        get: operations["AppointmentController_findAll"];
        put?: never;
        /** Crear nueva cita médica */
        post: operations["AppointmentController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/appointments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener cita médica por ID */
        get: operations["AppointmentController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar cita médica existente */
        patch: operations["AppointmentController_update"];
        trace?: never;
    };
    "/api/v1/appointments/patient/{pacienteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener citas médicas por paciente */
        get: operations["AppointmentController_findByPatient"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/appointments/staff/{personalId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener citas médicas por personal médico */
        get: operations["AppointmentController_findByStaff"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/appointments/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples citas médicas */
        delete: operations["AppointmentController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/appointments/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples citas médicas */
        patch: operations["AppointmentController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/paciente": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los pacientes */
        get: operations["PacientController_findAll"];
        put?: never;
        /** Crear nuevo paciente */
        post: operations["PacientController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/paciente/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener paciente por ID */
        get: operations["PacientController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar paciente existente */
        patch: operations["PacientController_update"];
        trace?: never;
    };
    "/api/v1/paciente/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples pacientes */
        delete: operations["PacientController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/paciente/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples pacientes */
        patch: operations["PacientController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/receta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las recetas médicas */
        get: operations["PrescriptionController_findAll"];
        put?: never;
        /** Crear nueva receta médica */
        post: operations["PrescriptionController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/receta/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener receta médica por ID */
        get: operations["PrescriptionController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar receta médica existente */
        patch: operations["PrescriptionController_update"];
        trace?: never;
    };
    "/api/v1/receta/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples recetas médicas */
        delete: operations["PrescriptionController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/receta/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples recetas médicas */
        patch: operations["PrescriptionController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/update-history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las actualizaciones de historias médicas */
        get: operations["UpdateHistoryController_findAll"];
        put?: never;
        /** Crear nueva actualización de historia médica */
        post: operations["UpdateHistoryController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/update-history/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener actualización de historia médica por ID */
        get: operations["UpdateHistoryController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar actualización de historia médica existente */
        patch: operations["UpdateHistoryController_update"];
        trace?: never;
    };
    "/api/v1/update-history/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples actualizaciones de historias médicas */
        delete: operations["UpdateHistoryController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/update-history/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples actualizaciones de historias médicas */
        patch: operations["UpdateHistoryController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/medical-history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las historias médicas */
        get: operations["MedicalHistoryController_findAll"];
        put?: never;
        /** Crear nueva historia médica */
        post: operations["MedicalHistoryController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/medical-history/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener historia médica por ID */
        get: operations["MedicalHistoryController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar historia médica existente */
        patch: operations["MedicalHistoryController_update"];
        trace?: never;
    };
    "/api/v1/medical-history/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples historias médicas */
        delete: operations["MedicalHistoryController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/medical-history/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples historias médicas */
        patch: operations["MedicalHistoryController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/staff-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los tipos de personal */
        get: operations["StaffTypeController_findAll"];
        put?: never;
        /** Crear un nuevo tipo de personal */
        post: operations["StaffTypeController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/staff-type/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener tipo de personal por ID */
        get: operations["StaffTypeController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar un tipo de personal */
        patch: operations["StaffTypeController_update"];
        trace?: never;
    };
    "/api/v1/staff-type/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Eliminar múltiples tipos de personal */
        delete: operations["StaffTypeController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/staff-type/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples tipos de personal */
        patch: operations["StaffTypeController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/staff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener Personal */
        get: operations["StaffController_findAll"];
        put?: never;
        /** Crear nuevo personal */
        post: operations["StaffController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/staff/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener personal por ID */
        get: operations["StaffController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar personal existente */
        patch: operations["StaffController_update"];
        trace?: never;
    };
    "/api/v1/staff/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Eliminar múltiple personal */
        delete: operations["StaffController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/staff/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiple personal */
        patch: operations["StaffController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/calendario": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los calendarios */
        get: operations["CalendarController_findAll"];
        put?: never;
        /** Crear nuevo calendario */
        post: operations["CalendarController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/calendario/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener calendario por ID */
        get: operations["CalendarController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar calendario existente */
        patch: operations["CalendarController_update"];
        trace?: never;
    };
    "/api/v1/calendario/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples calendarios */
        delete: operations["CalendarController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/calendario/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples calendarios */
        patch: operations["CalendarController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/evento": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los eventos */
        get: operations["EventController_findAll"];
        put?: never;
        /** Crear nuevo evento */
        post: operations["EventController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/evento/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener evento por ID */
        get: operations["EventController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar evento existente */
        patch: operations["EventController_update"];
        trace?: never;
    };
    "/api/v1/evento/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples eventos */
        delete: operations["EventController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/evento/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples eventos */
        patch: operations["EventController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/recurrencia": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las recurrencias */
        get: operations["RecurrenceController_findAll"];
        put?: never;
        /** Crear nueva recurrencia */
        post: operations["RecurrenceController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/recurrencia/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener recurrencia por ID */
        get: operations["RecurrenceController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar recurrencia existente */
        patch: operations["RecurrenceController_update"];
        trace?: never;
    };
    "/api/v1/recurrencia/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples recurrencias */
        delete: operations["RecurrenceController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/recurrencia/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples recurrencias */
        patch: operations["RecurrenceController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las categorías */
        get: operations["CategoryController_findAll"];
        put?: never;
        /** Crear nueva categoría */
        post: operations["CategoryController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/category/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las categorías activas */
        get: operations["CategoryController_findAllActive"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/category/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener categoría por ID */
        get: operations["CategoryController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar categoría existente */
        patch: operations["CategoryController_update"];
        trace?: never;
    };
    "/api/v1/category/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples categorías */
        delete: operations["CategoryController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/category/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples categorías */
        patch: operations["CategoryController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/type-product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los tipos de productos */
        get: operations["TypeProductController_findAll"];
        put?: never;
        /** Crear nuevo tipo de producto */
        post: operations["TypeProductController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/type-product/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los tipos de productos activos */
        get: operations["TypeProductController_findAllActive"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/type-product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener tipo de producto por ID */
        get: operations["TypeProductController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar tipo de producto existente */
        patch: operations["TypeProductController_update"];
        trace?: never;
    };
    "/api/v1/type-product/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples tipos de productos */
        delete: operations["TypeProductController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/type-product/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples tipos de productos */
        patch: operations["TypeProductController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los productos */
        get: operations["ProductController_findAll"];
        put?: never;
        /** Crear nuevo producto */
        post: operations["ProductController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/product/detailed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los productos con informaciòn detallada */
        get: operations["ProductController_findAllWithRelations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener producto por ID */
        get: operations["ProductController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar producto existente */
        patch: operations["ProductController_update"];
        trace?: never;
    };
    "/api/v1/product/{id}/detailed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener producto por ID con informaciòn detallada anidada */
        get: operations["ProductController_findOneWithRelations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/product/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples productos */
        delete: operations["ProductController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/product/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples productos */
        patch: operations["ProductController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/type-storage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los tipos de almacenamiento */
        get: operations["TypeStorageController_findAll"];
        put?: never;
        /** Crear nuevo tipo de almacenamiento */
        post: operations["TypeStorageController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/type-storage/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener tipo de almacenamiento por ID */
        get: operations["TypeStorageController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar tipo de almacenamiento existente */
        patch: operations["TypeStorageController_update"];
        trace?: never;
    };
    "/api/v1/type-storage/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples tipos de almacenamiento */
        delete: operations["TypeStorageController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/type-storage/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples tipos de almacenamiento */
        patch: operations["TypeStorageController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/storage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los almacenes */
        get: operations["StorageController_findAll"];
        put?: never;
        /** Crear nuevo almacén */
        post: operations["StorageController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/detailed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los almacenes */
        get: operations["StorageController_findAllWithRelations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los almacenes */
        get: operations["StorageController_findAllActive"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener almacén por ID */
        get: operations["StorageController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar almacén existente */
        patch: operations["StorageController_update"];
        trace?: never;
    };
    "/api/v1/storage/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples almacenes */
        delete: operations["StorageController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples almacenes */
        patch: operations["StorageController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/movement-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los tipos de movimiento */
        get: operations["TypeMovementController_findAll"];
        put?: never;
        /** Crear nuevo tipo de movimiento */
        post: operations["TypeMovementController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movement-type/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener tipo de movimiento por ID */
        get: operations["TypeMovementController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar tipo de movimiento existente */
        patch: operations["TypeMovementController_update"];
        trace?: never;
    };
    "/api/v1/movement-type/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples tipos de movimiento */
        delete: operations["TypeMovementController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movement-type/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples tipos de movimiento */
        patch: operations["TypeMovementController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/movements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los movimientos */
        get: operations["MovementController_findAll"];
        put?: never;
        /** Crear nuevo movimiento */
        post: operations["MovementController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener movimiento por ID */
        get: operations["MovementController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar movimiento existente */
        patch: operations["MovementController_update"];
        trace?: never;
    };
    "/api/v1/movements/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples movimientos */
        delete: operations["MovementController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/movements/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples movimientos */
        patch: operations["MovementController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/incoming": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todos los ingresos */
        get: operations["IncomingController_findAll"];
        put?: never;
        /** Crear nuevo ingreso */
        post: operations["IncomingController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/incoming/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener ingreso por ID */
        get: operations["IncomingController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar ingreso existente */
        patch: operations["IncomingController_update"];
        trace?: never;
    };
    "/api/v1/incoming/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples ingresos */
        delete: operations["IncomingController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/incoming/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples ingresos */
        patch: operations["IncomingController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/incoming/create/incomingStorage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Crear nuevo ingreso directo a alamacen */
        post: operations["IncomingController_createIncoming"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/outgoing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las salidas */
        get: operations["OutgoingController_findAll"];
        put?: never;
        /** Crear nueva salida */
        post: operations["OutgoingController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/outgoing/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener salida por ID */
        get: operations["OutgoingController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar salida existente */
        patch: operations["OutgoingController_update"];
        trace?: never;
    };
    "/api/v1/outgoing/remove/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Desactivar múltiples salidas */
        delete: operations["OutgoingController_deleteMany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/outgoing/reactivate/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivar múltiples salidas */
        patch: operations["OutgoingController_reactivateAll"];
        trace?: never;
    };
    "/api/v1/outgoing/create/outgoingStorage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Crear nueva salida directa de alamacen */
        post: operations["OutgoingController_createOutgoing"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stock/product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener stock de un producto por ID de todos los alamacenes */
        get: operations["StockController_getStockByProduct"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stock/storages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener stock de todos los almacenes */
        get: operations["StockController_getStockForAllStorages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stock/storage/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener stock por almacén por ID */
        get: operations["StockController_getStockByStorage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stock/storage/{storageId}/product/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener stock por almacén y producto */
        get: operations["StockController_getStockByStorageProduct"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing/medical-consultation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create medical consultation order */
        post: operations["BillingController_createMedicalConsultationOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing/product-sale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create product sale order */
        post: operations["BillingController_createProductSaleOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing/product-purchase": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create product purchase order */
        post: operations["BillingController_createProductPurchaseOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/consulta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener todas las consultas */
        get: operations["ConsultationController_findAll"];
        put?: never;
        /** Crear nueva consulta */
        post: operations["ConsultationController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/consulta/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener consulta por ID */
        get: operations["ConsultationController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RolResponseDto: {
            /** @description ID del rol */
            id: string;
            /** @description Nombre del rol */
            name: string;
            /** @description Descripción del rol */
            description?: string;
        };
        UserProfileResponseDto: {
            /**
             * @description Nombre del usuario
             * @example John Doe
             */
            name: string;
            /**
             * @description Correo electrónico del usuario
             * @example lW3T9@example.com
             */
            email: string;
            /**
             * @description Número de teléfono del usuario
             * @example +51999999999
             */
            phone?: string;
            id: string;
            isSuperAdmin: boolean;
            /**
             * @description Roles del usuario
             * @example [
             *       {
             *         "id": "123e4567-e89b-12d3-a456-426614174000",
             *         "name": "admin"
             *       }
             *     ]
             */
            roles: components["schemas"]["RolResponseDto"][];
        };
        UpdatePasswordDto: {
            password: string;
            newPassword: string;
            confirmPassword: string;
        };
        UserResponseDto: {
            /**
             * @description Nombre del usuario
             * @example John Doe
             */
            name: string;
            /**
             * @description Correo electrónico del usuario
             * @example lW3T9@example.com
             */
            email: string;
            /**
             * @description Número de teléfono del usuario
             * @example +51999999999
             */
            phone?: string;
            id: string;
            isSuperAdmin: boolean;
            /**
             * @description Roles del usuario
             * @example [
             *       {
             *         "id": "123e4567-e89b-12d3-a456-426614174000",
             *         "name": "admin"
             *       }
             *     ]
             */
            roles: components["schemas"]["RolResponseDto"][];
            /**
             * @description El usuario está activa
             * @example true
             */
            isActive: boolean;
            /**
             * @description El usuario debe cambiar la contraseña
             * @example true
             */
            mustChangePassword: boolean;
            /**
             * Format: date-time
             * @description Última vez que el usuario hizo login
             * @example 2021-01-01
             */
            lastLogin: string;
        };
        CreateUserDto: {
            /**
             * @description Nombre del usuario
             * @example John Doe
             */
            name: string;
            /**
             * @description Correo electrónico del usuario
             * @example lW3T9@example.com
             */
            email: string;
            /**
             * @description Contraseña del usuario
             * @example P@ssw0rd
             */
            password: string;
            /**
             * @description Número de teléfono del usuario
             * @example +51999999999
             */
            phone?: string;
            /**
             * @description Ids de roles del usuario
             * @example [
             *       "a5ece059-6d13-4c47-94e4-446e6bf6d0e4"
             *     ]
             */
            roles: string[];
        };
        BaseApiResponse: {
            /**
             * @description Estado de la operación
             * @example true
             */
            success: boolean;
            /**
             * @description Mensaje descriptivo
             * @example Operación realizada con éxito
             */
            message: string;
            /** @description Datos de la respuesta */
            data: Record<string, never> | null;
        };
        UpdateUserDto: {
            /** @description User name */
            name?: string;
            /** @description User phone */
            phone?: string;
            /** @description User rols */
            roles?: string[];
        };
        DeleteUsersDto: {
            ids: string[];
        };
        SendEmailDto: {
            email: string;
            password: string;
        };
        CreateRolDto: {
            name: string;
            description: string;
            rolPermissions: string[];
        };
        UpdateRolDto: {
            /**
             * @description Name of the rol
             * @example admin
             */
            name?: string;
            /**
             * @description Description of the rol
             * @example Administrator
             */
            description?: string;
            /**
             * @description Permissions of the rol
             * @example [
             *       "1",
             *       "2"
             *     ]
             */
            rolPermissions?: string[];
        };
        DeleteRolesDto: {
            ids: string[];
        };
        CreateAuditDto: {
            entityId: string;
            entityType: string;
            action: Record<string, never>;
            performedById: string;
            /** Format: date-time */
            createdAt: string;
        };
        LoginAuthDto: {
            /**
             * @description User email
             * @example admin@admin.com
             */
            email: string;
            /**
             * @description User password
             * @example admin
             */
            password: string;
        };
        CreateOrderDto: {
            /**
             * @description Código de la orden (opcional)
             * @example ORD-2024-001
             */
            code?: string;
            /**
             * @description Tipo de orden
             * @example PRODUCT_SALE_ORDER
             * @enum {string}
             */
            type: "MEDICAL_PRESCRIPTION_ORDER" | "MEDICAL_CONSULTATION_ORDER" | "PRODUCT_SALE_ORDER" | "PRODUCT_PURCHASE_ORDER";
            /**
             * @description ID del tipo de movimiento
             * @example movement-type-uuid
             */
            movementTypeId: string;
            /**
             * @description ID de referencia
             * @example reference-uuid
             */
            referenceId: string;
            /**
             * @description ID de origen (opcional)
             * @example source-uuid
             */
            sourceId?: string;
            /**
             * @description ID de destino (opcional)
             * @example target-uuid
             */
            targetId?: string;
            /**
             * @description Estado de la orden
             * @example DRAFT
             * @enum {string}
             */
            status: "DRAFT" | "PENDING" | "PROCESSING" | "COMPLETED" | "CANCELLED" | "REFUNDED" | "REQUIRES_ATTENTION";
            /**
             * @description Moneda de la orden
             * @example USD
             */
            currency: string;
            /**
             * @description Subtotal de la orden
             * @example 100.5
             */
            subtotal: number;
            /**
             * @description Impuesto
             * @example 18.5
             */
            tax: number;
            /**
             * @description Total de la orden
             * @example 119
             */
            total: number;
            /**
             * @description Notas adicionales (opcional)
             * @example Orden de prueba
             */
            notes?: string;
            /**
             * @description Metadatos adicionales (opcional)
             * @example {
             *       "custom": "value"
             *     }
             */
            metadata?: Record<string, never>;
        };
        Order: Record<string, never>;
        UpdateOrderDto: {
            /**
             * @description Código de la orden (opcional)
             * @example ORD-2024-001
             */
            code?: string;
            /**
             * @description Tipo de orden
             * @example PRODUCT_SALE_ORDER
             * @enum {string}
             */
            type?: "MEDICAL_PRESCRIPTION_ORDER" | "MEDICAL_CONSULTATION_ORDER" | "PRODUCT_SALE_ORDER" | "PRODUCT_PURCHASE_ORDER";
            /**
             * @description ID del tipo de movimiento
             * @example movement-type-uuid
             */
            movementTypeId?: string;
            /**
             * @description ID de referencia
             * @example reference-uuid
             */
            referenceId?: string;
            /**
             * @description ID de origen (opcional)
             * @example source-uuid
             */
            sourceId?: string;
            /**
             * @description ID de destino (opcional)
             * @example target-uuid
             */
            targetId?: string;
            /**
             * @description Estado de la orden
             * @example DRAFT
             * @enum {string}
             */
            status?: "DRAFT" | "PENDING" | "PROCESSING" | "COMPLETED" | "CANCELLED" | "REFUNDED" | "REQUIRES_ATTENTION";
            /**
             * @description Moneda de la orden
             * @example USD
             */
            currency?: string;
            /**
             * @description Subtotal de la orden
             * @example 100.5
             */
            subtotal?: number;
            /**
             * @description Impuesto
             * @example 18.5
             */
            tax?: number;
            /**
             * @description Total de la orden
             * @example 119
             */
            total?: number;
            /**
             * @description Notas adicionales (opcional)
             * @example Orden de prueba
             */
            notes?: string;
            /**
             * @description Metadatos adicionales (opcional)
             * @example {
             *       "custom": "value"
             *     }
             */
            metadata?: Record<string, never>;
        };
        DeleteOrdersDto: {
            ids: string[];
        };
        SubmitDraftOrderDto: {
            /**
             * @description Notas adicionales sobre la confirmación del borrador
             * @example Orden confirmada para procesamiento
             */
            notes?: string;
        };
        /** @enum {string} */
        OrderType: "MEDICAL_PRESCRIPTION_ORDER" | "MEDICAL_CONSULTATION_ORDER" | "PRODUCT_SALE_ORDER" | "PRODUCT_PURCHASE_ORDER";
        /** @enum {string} */
        OrderStatus: "DRAFT" | "PENDING" | "PROCESSING" | "COMPLETED" | "CANCELLED" | "REFUNDED" | "REQUIRES_ATTENTION";
        CreatePaymentDto: {
            /**
             * @description ID de la orden asociada
             * @example order-uuid
             */
            orderId: string;
            /**
             * Format: date-time
             * @description Fecha del pago
             * @example 2024-01-15T10:30:00Z
             */
            date?: string;
            /**
             * @description Estado del pago
             * @example PENDING
             * @enum {string}
             */
            status?: "PENDING" | "PROCESSING" | "COMPLETED" | "CANCELLED" | "REFUNDED";
            /**
             * @description Tipo de pago
             * @example REGULAR
             * @enum {string}
             */
            type: "REGULAR" | "REFUND" | "PARTIAL" | "ADJUSTMENT" | "COMPENSATION";
            /**
             * @description Monto del pago
             * @example 100.5
             */
            amount: number;
            /**
             * @description Descripción del pago
             * @example Pago de consulta médica
             */
            description?: string;
            /**
             * @description Método de pago
             * @enum {string}
             */
            paymentMethod?: "CASH" | "BANK_TRANSFER" | "YAPE";
            /** @description Número de comprobante */
            voucherNumber?: string;
            /** @description ID del pago original (en caso de reembolso) */
            originalPaymentId?: string;
        };
        Payment: {
            id: string;
            orderId: string;
            /** Format: date-time */
            date: string;
            /** @enum {string} */
            status: "PENDING" | "PROCESSING" | "COMPLETED" | "CANCELLED" | "REFUNDED";
            /** @enum {string} */
            type: "REGULAR" | "REFUND" | "PARTIAL" | "ADJUSTMENT" | "COMPENSATION";
            amount: number;
            description?: string;
            /** @enum {string} */
            paymentMethod: "CASH" | "BANK_TRANSFER" | "YAPE";
            voucherNumber?: string;
            originalPaymentId?: string;
            verifiedBy?: string;
            /** Format: date-time */
            verifiedAt?: string;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdatePaymentDto: {
            /**
             * @description ID de la orden asociada
             * @example order-uuid
             */
            orderId?: string;
            /**
             * Format: date-time
             * @description Fecha del pago
             * @example 2024-01-15T10:30:00Z
             */
            date?: string;
            /**
             * @description Nuevo estado del pago
             * @example COMPLETED
             * @enum {string}
             */
            status?: "PENDING" | "PROCESSING" | "COMPLETED" | "CANCELLED" | "REFUNDED";
            /**
             * @description Tipo de pago
             * @example REGULAR
             * @enum {string}
             */
            type?: "REGULAR" | "REFUND" | "PARTIAL" | "ADJUSTMENT" | "COMPENSATION";
            /**
             * @description Nuevo monto del pago
             * @example 150.75
             */
            amount?: number;
            /**
             * @description Nueva descripción del pago
             * @example Pago actualizado
             */
            description?: string;
            /**
             * @description Método de pago
             * @enum {string}
             */
            paymentMethod?: "CASH" | "BANK_TRANSFER" | "YAPE";
            /** @description Número de comprobante */
            voucherNumber?: string;
            /** @description ID del pago original (en caso de reembolso) */
            originalPaymentId?: string;
        };
        DeletePaymentsDto: {
            ids: string[];
        };
        CancelPaymentDto: {
            /**
             * @description Motivo de la cancelación
             * @example Cliente solicitó cancelación
             */
            cancellationReason: string;
        };
        ProcessPaymentDto: {
            /**
             * @description Método de pago a utilizar
             * @enum {string}
             */
            paymentMethod: "CASH" | "BANK_TRANSFER" | "YAPE";
            /**
             * @description Monto del pago
             * @example 100.5
             */
            amount: number;
            /** @description Número de comprobante/operación */
            voucherNumber?: string;
            /**
             * Format: date-time
             * @description Fecha de pago
             */
            date: string;
            /** @description Descripción o comentarios adicionales */
            description?: string;
        };
        VerifyPaymentDto: {
            /** @description Comentarios de verificación */
            verificationNotes?: string;
            /**
             * Format: date-time
             * @description Fecha de verificación
             */
            verifiedAt?: string;
        };
        RejectPaymentDto: {
            /** @description Motivo del rechazo */
            rejectionReason: string;
        };
        RefundPaymentDto: {
            /**
             * @description Monto a reembolsar
             * @example 100.5
             */
            amount: number;
            /**
             * @description Razón del reembolso
             * @example Producto defectuoso
             */
            reason: string;
            /**
             * @description Método de reembolso
             * @example BANK_TRANSFER
             * @enum {string}
             */
            refundMethod: "CASH" | "BANK_TRANSFER" | "YAPE";
            /** @description Notas adicionales */
            notes?: string;
        };
        CreateClientDto: {
            /** @description Client name */
            name: string;
            /** @description Client phone */
            phone?: string;
            /** @description Client RUC or DNI */
            rucDni: string;
            /** @description Client address */
            address: string;
            /** @description Client province */
            province: string;
            /** @description Client department */
            department: string;
        };
        UpdateClientDto: {
            /** @description Client name */
            name?: string;
            /** @description Client phone */
            phone?: string;
            /** @description Client RUC or DNI */
            rucDni?: string;
            /** @description Client address */
            address?: string;
            /** @description Client province */
            province?: string;
            /** @description Client department */
            department?: string;
        };
        DeleteClientsDto: {
            ids: string[];
        };
        CreateServiceDto: {
            /**
             * @description Name of the service
             * @example Consultation
             */
            name: string;
            /**
             * @description Description of the service
             * @example Medical consultation with a specialist
             */
            description?: string;
            /**
             * @description Price of the service
             * @example 50
             */
            price: number;
            /** @description ID of the service type */
            serviceTypeId: string;
        };
        Service: {
            id: string;
            name: string;
            description?: string;
            price: number;
            serviceTypeId: string;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateServiceDto: {
            /**
             * @description Name of the service
             * @example Consultation
             */
            name?: string;
            /**
             * @description Description of the service
             * @example Medical consultation with a specialist
             */
            description?: string;
            /**
             * @description Price of the service
             * @example 50
             */
            price?: number;
            /** @description ID of the service type */
            serviceTypeId?: string;
        };
        DeleteServicesDto: {
            ids: string[];
        };
        CreateServiceTypeDto: {
            /**
             * @description Name of the service type
             * @example Consultation
             */
            name: string;
            /**
             * @description Description of the service type
             * @example Medical consultation with a specialist
             */
            description?: string;
        };
        ServiceType: {
            id: string;
            name: string;
            description?: string;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateServiceTypeDto: {
            /**
             * @description Name of the service type
             * @example Consultation
             */
            name?: string;
            /**
             * @description Description of the service type
             * @example Medical consultation with a specialist
             */
            description?: string;
        };
        DeleteServiceTypesDto: {
            ids: string[];
        };
        CreateBranchDto: {
            /**
             * @description Nombre de la sucursal
             * @example Sede Central
             */
            name: string;
            /**
             * @description Dirección física de la sucursal
             * @example Av. Principal 123
             */
            address: string;
            /**
             * @description Número de teléfono de contacto de la sucursal
             * @example +51999999999
             */
            phone?: string;
        };
        Branch: {
            id: string;
            name: string;
            address: string;
            phone?: string;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateBranchDto: {
            /**
             * @description Nombre de la sucursal
             * @example Sede Central
             */
            name?: string;
            /**
             * @description Dirección física de la sucursal
             * @example Av. Principal 123
             */
            address?: string;
            /**
             * @description Número de teléfono de contacto de la sucursal
             * @example +51999999999
             */
            phone?: string;
        };
        DeleteBranchesDto: {
            ids: string[];
        };
        CreateAppointmentTypeDto: {
            /**
             * @description Nombre del tipo de cita
             * @example Consulta General
             */
            name: string;
            /**
             * @description Descripción del tipo de cita
             * @example Consulta médica general de rutina
             */
            description?: string;
        };
        AppointmentType: {
            id: string;
            name: string;
            description?: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateAppointmentTypeDto: {
            /**
             * @description Nombre del tipo de cita
             * @example Consulta General
             */
            name?: string;
            /**
             * @description Descripción del tipo de cita
             * @example Consulta médica general de rutina
             */
            description?: string;
        };
        DeleteAppointmentTypesDto: {
            /** @description Array of appointment type IDs to delete */
            ids: string[];
        };
        CreateAppointmentDto: {
            /**
             * @description ID del tipo de cita médica
             * @example 38371f66-63ca-4bb1-ac31-d2b165f6514d
             */
            tipoCitaMedicaId: string;
            /**
             * @description ID del personal médico
             * @example d424bee1-2574-439e-8db5-eaee510239e1
             */
            personalId: string;
            /**
             * @description ID de la consulta médica
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            consultaId: string;
            /**
             * @description Fecha y hora de la cita
             * @example 2024-12-25T14:30:00Z
             */
            date: string;
            /**
             * @description Descripción o motivo de la cita
             * @example Control mensual
             */
            description: string;
        };
        Appointment: {
            id: string;
            tipoCitaMedicaId: string;
            personalId: string;
            consultaId: string;
            /** Format: date-time */
            date: string;
            description: string;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            TipoCitaMedica?: Record<string, never>;
            personal?: Record<string, never>;
            ConsultaMedica?: Record<string, never>;
            ProcedimientoMedico?: string[];
        };
        UpdateAppointmentDto: {
            /**
             * @description ID del tipo de cita médica
             * @example 38371f66-63ca-4bb1-ac31-d2b165f6514d
             */
            tipoCitaMedicaId?: string;
            /**
             * @description ID del personal médico
             * @example d424bee1-2574-439e-8db5-eaee510239e1
             */
            personalId?: string;
            /**
             * @description ID de la consulta médica
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            consultaId?: string;
            /**
             * @description Fecha y hora de la cita
             * @example 2024-12-25T14:30:00Z
             */
            date?: string;
            /**
             * @description Descripción o motivo de la cita
             * @example Control mensual
             */
            description?: string;
        };
        DeleteAppointmentsDto: {
            ids: string[];
        };
        CreatePatientDto: {
            /**
             * @description Nombre completo del paciente
             * @example Juan Pérez
             */
            name: string;
            /**
             * @description Apellido del paciente
             * @example González
             */
            lastName?: string;
            /**
             * @description DNI del paciente
             * @example 12345678
             */
            dni: string;
            /**
             * Format: date-time
             * @description Fecha de nacimiento del paciente
             * @example 1990-01-01
             */
            birthDate: string;
            /**
             * @description Sexo del paciente (M/F)
             * @example true
             */
            gender: string;
            /**
             * @description Dirección del paciente
             * @example Av. Principal 123
             */
            address?: string;
            /**
             * @description Número de teléfono del paciente
             * @example +51999999999
             */
            phone?: string;
            /**
             * @description Correo electrónico del paciente
             * @example juan.perez@example.com
             */
            correo?: string;
            /**
             * Format: date-time
             * @description Fecha de registro del paciente
             * @example 2023-01-01
             */
            fechaRegistro: string;
            /**
             * @description Alergias conocidas del paciente
             * @example Polen, Maní
             */
            alergias?: string;
            /**
             * @description Medicamentos que el paciente está tomando
             * @example Ibuprofeno, Paracetamol
             */
            medicamentosActuales?: string;
            /**
             * @description Nombre del contacto de emergencia
             * @example María Pérez
             */
            emergencyContact?: string;
            /**
             * @description Teléfono del contacto de emergencia
             * @example +51999999999
             */
            emergencyPhone?: string;
            /**
             * @description Nombre de la compañía de seguro médico
             * @example Seguro Salud
             */
            healthInsurance?: string;
            /**
             * @description Estado civil del paciente
             * @example Soltero
             */
            maritalStatus?: string;
            /**
             * @description Profesión del paciente
             * @example Ingeniero
             */
            occupation?: string;
            /**
             * @description Nombre y dirección del lugar de trabajo
             * @example Empresa XYZ, Av. Industrial 456
             */
            workplace?: string;
            /**
             * @description Grupo sanguíneo del paciente
             * @example O+
             */
            bloodType?: string;
            /**
             * @description Nombre y contacto del médico principal
             * @example Dr. Juan Pérez, +51999999999
             */
            primaryDoctor?: string;
            /**
             * @description Idioma preferido del paciente
             * @example Español
             */
            language?: string;
            /**
             * @description Cualquier otra observación relevante
             * @example Paciente con antecedentes de alergias severas
             */
            notes?: string;
            /**
             * @description Imagen del paciente para identificación visual
             * @example data:image/png;base64,...
             */
            patientPhoto?: string;
        };
        Patient: {
            id: string;
            name: string;
            lastName: string;
            dni: string;
            /** Format: date-time */
            cumpleanos: string;
            sexo: boolean;
            direccion: string;
            telefono: string;
            correo: string;
            /** Format: date-time */
            fechaRegistro: string;
            alergias: string;
            medicamentosActuales: string;
            contactoEmergencia: string;
            telefonoEmergencia: string;
            seguroMedico: string;
            estadoCivil: string;
            ocupacion: string;
            lugarTrabajo: string;
            tipoSangre: string;
            antecedentesFamiliares: string;
            habitosVida: string;
            vacunas: string;
            medicoCabecera: string;
            idioma: string;
            autorizacionTratamiento: string;
            observaciones: string;
            fotografiaPaciente: string;
        };
        UpdatePatientDto: {
            /**
             * @description Nombre completo del paciente
             * @example Juan Pérez
             */
            name?: string;
            /**
             * @description Apellido del paciente
             * @example González
             */
            lastName?: string;
            /**
             * @description DNI del paciente
             * @example 12345678
             */
            dni?: string;
            /**
             * Format: date-time
             * @description Fecha de nacimiento del paciente
             * @example 1990-01-01
             */
            birthDate?: string;
            /**
             * @description Sexo del paciente (M/F)
             * @example true
             */
            gender?: string;
            /**
             * @description Dirección del paciente
             * @example Av. Principal 123
             */
            address?: string;
            /**
             * @description Número de teléfono del paciente
             * @example +51999999999
             */
            phone?: string;
            /**
             * @description Correo electrónico del paciente
             * @example juan.perez@example.com
             */
            correo?: string;
            /**
             * Format: date-time
             * @description Fecha de registro del paciente
             * @example 2023-01-01
             */
            fechaRegistro?: string;
            /**
             * @description Alergias conocidas del paciente
             * @example Polen, Maní
             */
            alergias?: string;
            /**
             * @description Medicamentos que el paciente está tomando
             * @example Ibuprofeno, Paracetamol
             */
            medicamentosActuales?: string;
            /**
             * @description Nombre del contacto de emergencia
             * @example María Pérez
             */
            emergencyContact?: string;
            /**
             * @description Teléfono del contacto de emergencia
             * @example +51999999999
             */
            emergencyPhone?: string;
            /**
             * @description Nombre de la compañía de seguro médico
             * @example Seguro Salud
             */
            healthInsurance?: string;
            /**
             * @description Estado civil del paciente
             * @example Soltero
             */
            maritalStatus?: string;
            /**
             * @description Profesión del paciente
             * @example Ingeniero
             */
            occupation?: string;
            /**
             * @description Nombre y dirección del lugar de trabajo
             * @example Empresa XYZ, Av. Industrial 456
             */
            workplace?: string;
            /**
             * @description Grupo sanguíneo del paciente
             * @example O+
             */
            bloodType?: string;
            /**
             * @description Nombre y contacto del médico principal
             * @example Dr. Juan Pérez, +51999999999
             */
            primaryDoctor?: string;
            /**
             * @description Idioma preferido del paciente
             * @example Español
             */
            language?: string;
            /**
             * @description Cualquier otra observación relevante
             * @example Paciente con antecedentes de alergias severas
             */
            notes?: string;
            /**
             * @description Imagen del paciente para identificación visual
             * @example data:image/png;base64,...
             */
            patientPhoto?: string;
        };
        DeletePatientDto: {
            ids: string[];
        };
        CreatePrescriptionDto: {
            /**
             * @description ID de la actualización de historia médica
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            updateHistoryId: string;
            /**
             * @description ID de la sucursal donde se emite la receta
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            branchId: string;
            /**
             * @description ID del personal médico que emite la receta
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            staffId: string;
            /**
             * @description ID del paciente
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            patientId: string;
            /**
             * Format: date-time
             * @description Fecha de emisión de la receta
             * @example 2024-03-15T10:00:00Z
             */
            registrationDate: string;
            /**
             * @description Detalle de medicamentos y dosificación
             * @example {
             *       "medicamentos": [
             *         {
             *           "nombre": "Paracetamol",
             *           "dosis": "500mg",
             *           "frecuencia": "Cada 8 horas",
             *           "duracion": "5 días"
             *         }
             *       ]
             *     }
             */
            prescription: Record<string, never>;
            /**
             * @description Descripción o notas adicionales
             * @example Tomar después de las comidas
             */
            description?: string;
            /**
             * @description ID de la orden de compra asociada
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            purchaseOrderId?: string;
        };
        Prescription: {
            id: string;
            updateHistoryId: string;
            branchId: string;
            staffId: string;
            patientId: string;
            /** Format: date-time */
            registrationDate: string;
            prescription: string;
            description: string;
            purchaseOrderId: string;
            isActive: boolean;
        };
        UpdatePrescriptionDto: {
            /**
             * @description ID de la actualización de historia médica
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            updateHistoryId?: string;
            /**
             * @description ID de la sucursal donde se emite la receta
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            branchId?: string;
            /**
             * @description ID del personal médico que emite la receta
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            staffId?: string;
            /**
             * @description ID del paciente
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            patientId?: string;
            /**
             * Format: date-time
             * @description Fecha de emisión de la receta
             * @example 2024-03-15T10:00:00Z
             */
            registrationDate?: string;
            /**
             * @description Detalle de medicamentos y dosificación
             * @example {
             *       "medicamentos": [
             *         {
             *           "nombre": "Paracetamol",
             *           "dosis": "500mg",
             *           "frecuencia": "Cada 8 horas",
             *           "duracion": "5 días"
             *         }
             *       ]
             *     }
             */
            prescription?: Record<string, never>;
            /**
             * @description Descripción o notas adicionales
             * @example Tomar después de las comidas
             */
            description?: string;
            /**
             * @description ID de la orden de compra asociada
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            purchaseOrderId?: string;
        };
        DeletePrescriptionDto: {
            ids: string[];
        };
        CreateUpdateHistoryDto: {
            /**
             * @description ID del servicio
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            serviceId: string;
            /**
             * @description ID del personal médico
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            staffId: string;
            /**
             * @description ID de la sucursal
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            branchId: string;
            /**
             * @description ID de la historia médica
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            medicalHistoryId: string;
            /**
             * @description Indica si tiene receta médica
             * @default false
             * @example false
             */
            prescription: boolean;
            /**
             * @description ID de la receta médica
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            prescriptionId?: string;
            /**
             * @description Detalles de la actualización
             * @example {
             *       "diagnostico": "Gripe común",
             *       "tratamiento": "Reposo y medicamentos",
             *       "observaciones": "Seguimiento en 7 días"
             *     }
             */
            updateHistory: Record<string, never>;
            /**
             * @description Descripción adicional
             * @example Paciente presenta mejoría
             */
            description?: string;
            /**
             * @description Indica si requiere descanso médico
             * @default false
             * @example false
             */
            medicalLeave: boolean;
            /**
             * Format: date-time
             * @description Fecha de inicio del descanso médico
             * @example 2024-03-16T10:00:00Z
             */
            medicalLeaveStartDate?: string;
            /**
             * Format: date-time
             * @description Fecha de fin del descanso médico
             * @example 2024-03-19T10:00:00Z
             */
            medicalLeaveEndDate?: string;
            /**
             * @description Cantidad de días de descanso médico
             * @example 3
             */
            medicalLeaveDays?: number;
            /**
             * @description Descripción del descanso médico
             * @example Reposo por 3 días
             */
            leaveDescription?: string;
        };
        UpdateHistory: {
            id: string;
            serviceId: string;
            staffId: string;
            branchId: string;
            medicalHistoryId: string;
            prescription: boolean;
            prescriptionId: string;
            updateHistory: Record<string, never>;
            description: string;
            medicalLeave: boolean;
            /** Format: date-time */
            medicalLeaveStartDate: string;
            /** Format: date-time */
            medicalLeaveEndDate: string;
            medicalLeaveDays: number;
            leaveDescription: string;
            isActive: boolean;
        };
        UpdateUpdateHistoryDto: {
            /**
             * @description ID del servicio
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            serviceId?: string;
            /**
             * @description ID del personal médico
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            staffId?: string;
            /**
             * @description ID de la sucursal
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            branchId?: string;
            /**
             * @description ID de la historia médica
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            medicalHistoryId?: string;
            /**
             * @description Indica si tiene receta médica
             * @default false
             * @example false
             */
            prescription: boolean;
            /**
             * @description ID de la receta médica
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            prescriptionId?: string;
            /**
             * @description Detalles de la actualización
             * @example {
             *       "diagnostico": "Gripe común",
             *       "tratamiento": "Reposo y medicamentos",
             *       "observaciones": "Seguimiento en 7 días"
             *     }
             */
            updateHistory?: Record<string, never>;
            /**
             * @description Descripción adicional
             * @example Paciente presenta mejoría
             */
            description?: string;
            /**
             * @description Indica si requiere descanso médico
             * @default false
             * @example false
             */
            medicalLeave: boolean;
            /**
             * Format: date-time
             * @description Fecha de inicio del descanso médico
             * @example 2024-03-16T10:00:00Z
             */
            medicalLeaveStartDate?: string;
            /**
             * Format: date-time
             * @description Fecha de fin del descanso médico
             * @example 2024-03-19T10:00:00Z
             */
            medicalLeaveEndDate?: string;
            /**
             * @description Cantidad de días de descanso médico
             * @example 3
             */
            medicalLeaveDays?: number;
            /**
             * @description Descripción del descanso médico
             * @example Reposo por 3 días
             */
            leaveDescription?: string;
        };
        DeleteUpdateHistoryDto: {
            ids: string[];
        };
        CreateMedicalHistoryDto: {
            /**
             * @description ID of the patient
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            patientId: string;
            /**
             * @description Medical history data
             * @example {
             *       "antecedentes": "No relevant history",
             *       "alergias": "None known",
             *       "enfermedadesCronicas": [
             *         "Hypertension"
             *       ],
             *       "cirugiasPrevias": [
             *         "Appendectomy 2018"
             *       ]
             *     }
             */
            medicalHistory: Record<string, never>;
            /**
             * @description Additional description
             * @example First patient consultation
             */
            description?: string;
        };
        MedicalHistory: {
            id: string;
            patientId: string;
            medicalHistory: Record<string, never>;
            description: string;
            isActive: boolean;
        };
        UpdateMedicalHistoryDto: {
            /**
             * @description ID of the patient
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            patientId?: string;
            /**
             * @description Medical history data
             * @example {
             *       "antecedentes": "No relevant history",
             *       "alergias": "None known",
             *       "enfermedadesCronicas": [
             *         "Hypertension"
             *       ],
             *       "cirugiasPrevias": [
             *         "Appendectomy 2018"
             *       ]
             *     }
             */
            medicalHistory?: Record<string, never>;
            /**
             * @description Additional description
             * @example First patient consultation
             */
            description?: string;
        };
        DeleteMedicalHistoryDto: {
            ids: string[];
        };
        CreateStaffTypeDto: {
            /**
             * @description Nombre de la especialidad
             * @example Cardiología
             */
            name: string;
            /**
             * @description Descripción de la especialidad
             * @example Especialidad enfocada en el sistema cardiovascular
             */
            description: string;
        };
        StaffType: {
            /** @description ID único del tipo de personal */
            id: string;
            /** @description Nombre del tipo de personal */
            name: string;
            /** @description Descripción del tipo de personal */
            description?: string;
            /** @description Estado activo/inactivo del tipo de personal */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Fecha de creación del registro
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Fecha de última actualización
             */
            updatedAt: string;
        };
        UpdateStaffTypeDto: {
            /**
             * @description Nombre de la especialidad
             * @example Cardiología
             */
            name?: string;
            /**
             * @description Descripción de la especialidad
             * @example Especialidad enfocada en el sistema cardiovascular
             */
            description?: string;
        };
        DeleteStaffTypeDto: {
            ids: string[];
        };
        CreateStaffDto: {
            /**
             * @description ID del tipo de personal
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            staffTypeId: string;
            /**
             * @description ID del usuario asociado al personal médico en el sistema
             * @example 7c4dd6ce-scratch-41d4-a716-446655441111
             */
            userId?: string;
            /**
             * @description Nombre del personal médico
             * @example Carlos
             */
            name: string;
            /**
             * @description Apellido del personal médico
             * @example Rodríguez
             */
            lastName: string;
            /**
             * @description Número de DNI del personal médico
             * @example 40506070
             */
            dni: string;
            /**
             * @description Fecha de nacimiento del personal médico
             * @example 1980-05-15
             */
            birth: string;
            /**
             * @description email
             * @example personal1@correo.com
             */
            email: string;
            /**
             * @description numero de telefono
             * @example 123456789
             */
            phone?: string;
        };
        Staff: {
            /** @description ID único del personal */
            id: string;
            /** @description ID del tipo de personal */
            staffTypeId: string;
            /** @description ID del usuario asociado */
            userId: string | null;
            /** @description Nombre del personal */
            name: string;
            /** @description Correo electrónico */
            email: string;
            /** @description Número telefónico */
            phone: string;
            /** @description Apellido del personal */
            lastName: string;
            /** @description Documento Nacional de Identidad */
            dni: string;
            /** @description Fecha de nacimiento */
            birth: string;
            /** @description Estado activo/inactivo del personal */
            isActive: boolean;
            /**
             * Format: date-time
             * @description Fecha de creación del registro
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Fecha de última actualización
             */
            updatedAt: string;
            /**
             * @description Información del tipo de personal
             * @example {
             *       "name": "doctor"
             *     }
             */
            staffType: {
                /**
                 * @description Nombre del tipo de personal
                 * @example doctor
                 */
                name?: string;
            };
        };
        UpdateStaffDto: {
            /**
             * @description ID del tipo de personal
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            staffTypeId?: string;
            /**
             * @description ID del usuario asociado al personal médico en el sistema
             * @example 7c4dd6ce-scratch-41d4-a716-446655441111
             */
            userId?: string;
            /**
             * @description Nombre del personal médico
             * @example Carlos
             */
            name?: string;
            /**
             * @description Apellido del personal médico
             * @example Rodríguez
             */
            lastName?: string;
            /**
             * @description Número de DNI del personal médico
             * @example 40506070
             */
            dni?: string;
            /**
             * @description Fecha de nacimiento del personal médico
             * @example 1980-05-15
             */
            birth?: string;
            /**
             * @description email
             * @example personal1@correo.com
             */
            email?: string;
            /**
             * @description numero de telefono
             * @example 123456789
             */
            phone?: string;
        };
        DeleteStaffDto: {
            ids: string[];
        };
        CreateCalendarDto: {
            /**
             * @description Nombre del calendario
             * @example Horario Normal
             */
            name: string;
            /**
             * @description Tipo de calendario
             * @example PERSONAL, CITAS_MEDICAS o CONSULTAS_MEDICAS
             */
            type: Record<string, never>;
            /**
             * @description ID de la cita médica asociada al calendario
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            medicalAppointmentId?: string;
            /**
             * @description ID de la consulta médica asociada al calendario
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            medicalConsultationId?: string;
            /**
             * @description ID del personal asociado al calendario
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            staffId?: string;
            /**
             * @description ID de la sucursal asociada al calendario
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            branchId?: string;
            /**
             * @description Indica si el calendario está activo
             * @example true
             */
            isActive: boolean;
        };
        Calendar: {
            id: string;
            name: string;
            type: string;
            medicalAppointmentId?: string;
            medicalConsultationId?: string;
            staffId?: string;
            branchId?: string;
            /** @default true */
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
        };
        UpdateCalendarDto: {
            /**
             * @description Nombre del calendario
             * @example Horario Normal
             */
            name?: string;
            /**
             * @description Tipo de calendario
             * @example PERSONAL, CITAS_MEDICAS o CONSULTAS_MEDICAS
             */
            type?: Record<string, never>;
            /**
             * @description ID de la cita médica asociada al calendario
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            medicalAppointmentId?: string;
            /**
             * @description ID de la consulta médica asociada al calendario
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            medicalConsultationId?: string;
            /**
             * @description ID del personal asociado al calendario
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            staffId?: string;
            /**
             * @description ID de la sucursal asociada al calendario
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            branchId?: string;
            /**
             * @description Indica si el calendario está activo
             * @example true
             */
            isActive?: boolean;
        };
        DeleteCalendarDto: {
            ids: string[];
        };
        CreateEventDto: {
            /**
             * @description ID del calendario al que pertenece el evento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            calendarId: string;
            /**
             * @description Tipo de evento
             * @example INGRESO
             */
            type: Record<string, never>;
            /**
             * @description Nombre del evento
             * @example Ingreso turno mañana
             */
            name: string;
            /**
             * @description Descripción detallada del evento
             * @example Ingreso del personal para el turno de la mañana
             */
            description?: string;
            /**
             * Format: date-time
             * @description Fecha y hora de inicio del evento
             * @example 2024-03-15T08:00:00
             */
            startDate: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin del evento
             * @example 2024-03-15T17:00:00
             */
            endDate: string;
            /**
             * @description Color para identificar visualmente el evento
             * @example #FF0000
             */
            color?: string;
            /**
             * @description Tipo de permiso (si aplica)
             * @example MEDICO
             */
            permissionType?: Record<string, never>;
            /**
             * @description Estado del permiso
             * @example PENDIENTE
             */
            permissionStatus?: Record<string, never>;
            /**
             * @description Duración del evento en minutos
             * @example 60
             */
            duration?: number;
            /**
             * @description ID del paciente asociado al evento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            patientId?: string;
            /**
             * @description ID del personal asociado al evento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            staffId?: string;
            /**
             * @description ID del personal asociado al evento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            recurrenceId?: string;
            /**
             * @description Indica si el evento está activo
             * @default true
             * @example true
             */
            isActive: boolean;
        };
        Event: {
            id: string;
            calendarId: string;
            type: string;
            name: string;
            description?: string;
            /** Format: date-time */
            startDate: string;
            /** Format: date-time */
            endDate: string;
            color?: string;
            permissionType?: string;
            permissionStatus?: string;
            duration?: number;
            patientId?: string;
            staffId?: string;
            /** @default true */
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            recurrenceId?: string;
        };
        UpdateEventDto: {
            /**
             * @description ID del calendario al que pertenece el evento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            calendarId?: string;
            /**
             * @description Tipo de evento
             * @example INGRESO
             */
            type?: Record<string, never>;
            /**
             * @description Nombre del evento
             * @example Ingreso turno mañana
             */
            name?: string;
            /**
             * @description Descripción detallada del evento
             * @example Ingreso del personal para el turno de la mañana
             */
            description?: string;
            /**
             * Format: date-time
             * @description Fecha y hora de inicio del evento
             * @example 2024-03-15T08:00:00
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Fecha y hora de fin del evento
             * @example 2024-03-15T17:00:00
             */
            endDate?: string;
            /**
             * @description Color para identificar visualmente el evento
             * @example #FF0000
             */
            color?: string;
            /**
             * @description Tipo de permiso (si aplica)
             * @example MEDICO
             */
            permissionType?: Record<string, never>;
            /**
             * @description Estado del permiso
             * @example PENDIENTE
             */
            permissionStatus?: Record<string, never>;
            /**
             * @description Duración del evento en minutos
             * @example 60
             */
            duration?: number;
            /**
             * @description ID del paciente asociado al evento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            patientId?: string;
            /**
             * @description ID del personal asociado al evento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            staffId?: string;
            /**
             * @description ID del personal asociado al evento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            recurrenceId?: string;
            /**
             * @description Indica si el evento está activo
             * @default true
             * @example true
             */
            isActive: boolean;
        };
        DeleteEventDto: {
            ids: string[];
        };
        CreateRecurrenceDto: {
            /**
             * @description Frecuencia de la recurrencia
             * @example DIARIA
             */
            frequency: Record<string, never>;
            /**
             * @description Intervalo de repetición
             * @example 1
             */
            interval: number;
            /**
             * @description Días específicos de la semana (opcional)
             * @example [
             *       "LUNES",
             *       "MIERCOLES",
             *       "VIERNES"
             *     ]
             */
            daysOfWeek?: string[];
            /**
             * @description Fechas específicas a excluir
             * @example [
             *       "SABADO",
             *       "DOMINGO"
             *     ]
             */
            exceptions?: string[];
            /**
             * Format: date-time
             * @description Fecha de inicio de la recurrencia
             * @example 2024-03-15T00:00:00Z
             */
            startDate: string;
            /**
             * Format: date-time
             * @description Fecha de fin de la recurrencia
             * @example 2024-12-31T00:00:00Z
             */
            endDate?: string;
            /**
             * @description Indica si la recurrencia está activa
             * @default true
             */
            isActive: boolean;
        };
        Recurrence: {
            id: string;
            /**
             * @description Frecuencia de la recurrencia
             * @example DIARIA
             */
            frequency: string;
            /**
             * @description Intervalo de repetición
             * @example 1
             */
            interval: number;
            /**
             * @description Días específicos de la semana (opcional)
             * @example [
             *       "LUNES",
             *       "MIERCOLES",
             *       "VIERNES"
             *     ]
             */
            daysOfWeek?: string[];
            /**
             * @description Fechas específicas a excluir
             * @example [
             *       "SABADO",
             *       "DOMINGO"
             *     ]
             */
            exceptions?: string[];
            /**
             * Format: date-time
             * @description Fecha de inicio de la recurrencia
             * @example 2024-03-15T00:00:00Z
             */
            startDate: string;
            /**
             * Format: date-time
             * @description Fecha de fin de la recurrencia
             * @example 2024-12-31T00:00:00Z
             */
            endDate?: string;
            /**
             * @description Indica si la recurrencia está activa
             * @default true
             * @example true
             */
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateRecurrenceDto: {
            /**
             * @description Frecuencia de la recurrencia
             * @example DIARIA
             */
            frequency?: Record<string, never>;
            /**
             * @description Intervalo de repetición
             * @example 1
             */
            interval?: number;
            /**
             * @description Días específicos de la semana (opcional)
             * @example [
             *       "LUNES",
             *       "MIERCOLES",
             *       "VIERNES"
             *     ]
             */
            daysOfWeek?: string[];
            /**
             * @description Fechas específicas a excluir
             * @example [
             *       "SABADO",
             *       "DOMINGO"
             *     ]
             */
            exceptions?: string[];
            /**
             * Format: date-time
             * @description Fecha de inicio de la recurrencia
             * @example 2024-03-15T00:00:00Z
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Fecha de fin de la recurrencia
             * @example 2024-12-31T00:00:00Z
             */
            endDate?: string;
            /**
             * @description Indica si la recurrencia está activa
             * @default true
             */
            isActive: boolean;
        };
        DeleteRecurrenceDto: {
            ids: string[];
        };
        CreateCategoryDto: {
            /**
             * @description Nombre de la categoría
             * @example Medicamentos, Cosméticos, Materiales
             */
            name: string;
            /**
             * @description Descripción de la categoría
             * @example Descripción opcional que proporciona más detalles sobre la categoría
             */
            description?: string;
        };
        Category: {
            id: string;
            name: string;
            description: string;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
        };
        UpdateCategoryDto: {
            /**
             * @description Nombre de la categoría
             * @example Medicamentos, Cosméticos, Materiales
             */
            name?: string;
            /**
             * @description Descripción de la categoría
             * @example Descripción opcional que proporciona más detalles sobre la categoría
             */
            description?: string;
        };
        DeleteCategoryDto: {
            ids: string[];
        };
        CreateTypeProductDto: {
            /**
             * @description Nombre del tipo de producto
             * @example Antibióticos, Bloqueadores solares, Gasas
             */
            name: string;
            /**
             * @description Descripción del tipo de producto
             * @example Medicamentos para el tratamiento de infecciones bacterianas
             */
            description?: string;
        };
        TypeProductResponse: {
            id: string;
            name: string;
            description: string;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
        };
        TypeProduct: {
            id: string;
            name: string;
            description: string;
        };
        UpdateTypeProductDto: {
            /**
             * @description Nombre del tipo de producto
             * @example Antibióticos, Bloqueadores solares, Gasas
             */
            name?: string;
            /**
             * @description Descripción del tipo de producto
             * @example Medicamentos para el tratamiento de infecciones bacterianas
             */
            description?: string;
        };
        DeleteTypeProductDto: {
            ids: string[];
        };
        CreateProductDto: {
            /**
             * @description ID de la categoría
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            categoriaId: string;
            /**
             * @description ID del tipo de producto
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            tipoProductoId: string;
            /**
             * @description Nombre del producto
             * @example Paracetamol 500mg
             */
            name: string;
            /**
             * @description Precio del producto
             * @example 15.5
             */
            precio: number;
            /**
             * @description Unidad de medida
             * @example mg
             */
            unidadMedida?: string;
            /**
             * @description Proveedor o fabricante
             * @example Laboratorios XYZ
             */
            proveedor?: string;
            /**
             * @description Uso del producto
             * @example Paciente
             */
            uso?: string;
            /**
             * @description Uso específico del producto
             * @example Venta
             */
            usoProducto?: string;
            /**
             * @description Descripción del producto
             * @example Analgésico y antipirético para adultos
             */
            description?: string;
            /**
             * @description Código único del producto
             * @example 7501234567890
             */
            codigoProducto?: string;
            /**
             * @description Descuento aplicado
             * @example 10.5
             */
            descuento?: number;
            /**
             * @description Observaciones adicionales
             * @example Mantener fuera del alcance de los niños
             */
            observaciones?: string;
            /**
             * @description Condiciones de almacenamiento
             * @example Mantener en lugar fresco y seco
             */
            condicionesAlmacenamiento?: string;
            /**
             * @description URL de la imagen del producto
             * @example https://ejemplo.com/imagen.jpg
             */
            imagenUrl?: string;
        };
        Product: {
            id: string;
            categoriaId: string;
            tipoProductoId: string;
            name: string;
            precio: number;
            unidadMedida: string;
            proveedor: string;
            uso: string;
            usoProducto: string;
            description: string;
            codigoProducto: string;
            descuento: number;
            observaciones: string;
            condicionesAlmacenamiento: string;
            imagenUrl: string;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
        };
        ProductWithRelations: {
            id: string;
            categoriaId: string;
            tipoProductoId: string;
            name: string;
            precio: number;
            unidadMedida: string;
            proveedor: string;
            uso: string;
            usoProducto: string;
            description: string;
            codigoProducto: string;
            descuento: number;
            observaciones: string;
            condicionesAlmacenamiento: string;
            imagenUrl: string;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            categoria: Record<string, never>;
            tipoProducto: Record<string, never>;
        };
        UpdateProductDto: {
            /**
             * @description ID de la categoría
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            categoriaId?: string;
            /**
             * @description ID del tipo de producto
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            tipoProductoId?: string;
            /**
             * @description Nombre del producto
             * @example Paracetamol 500mg
             */
            name?: string;
            /**
             * @description Precio del producto
             * @example 15.5
             */
            precio?: number;
            /**
             * @description Unidad de medida
             * @example mg
             */
            unidadMedida?: string;
            /**
             * @description Proveedor o fabricante
             * @example Laboratorios XYZ
             */
            proveedor?: string;
            /**
             * @description Uso del producto
             * @example Paciente
             */
            uso?: string;
            /**
             * @description Uso específico del producto
             * @example Venta
             */
            usoProducto?: string;
            /**
             * @description Descripción del producto
             * @example Analgésico y antipirético para adultos
             */
            description?: string;
            /**
             * @description Código único del producto
             * @example 7501234567890
             */
            codigoProducto?: string;
            /**
             * @description Descuento aplicado
             * @example 10.5
             */
            descuento?: number;
            /**
             * @description Observaciones adicionales
             * @example Mantener fuera del alcance de los niños
             */
            observaciones?: string;
            /**
             * @description Condiciones de almacenamiento
             * @example Mantener en lugar fresco y seco
             */
            condicionesAlmacenamiento?: string;
            /**
             * @description URL de la imagen del producto
             * @example https://ejemplo.com/imagen.jpg
             */
            imagenUrl?: string;
        };
        DeleteProductDto: {
            ids: string[];
        };
        CreateTypeStorageDto: {
            /**
             * @description Nombre del tipo de almacén
             * @example almacen secos, almacen refrigerados
             */
            name: string;
            /**
             * @description Descripción del tipo de almacén
             * @example Almacén destinado a productos listos para su distribución
             */
            description?: string;
            /**
             * @description ID de la sucursal si es necesario
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            branchId?: string;
            /**
             * @description ID del personal responsable si es necesario
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            staffId?: string;
        };
        TypeStorage: {
            id: string;
            name: string;
            description: string;
            branchId: string;
            staffId: string;
            isActive: boolean;
        };
        UpdateTypeStorageDto: {
            /**
             * @description Nombre del tipo de almacén
             * @example almacen secos, almacen refrigerados
             */
            name?: string;
            /**
             * @description Descripción del tipo de almacén
             * @example Almacén destinado a productos listos para su distribución
             */
            description?: string;
            /**
             * @description ID de la sucursal si es necesario
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            branchId?: string;
            /**
             * @description ID del personal responsable si es necesario
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            staffId?: string;
        };
        DeleteTypeStorageDto: {
            ids: string[];
        };
        CreateStorageDto: {
            /**
             * @description Nombre del almacén
             * @example Almacén Central, Almacén 1, Alacen 2
             */
            name: string;
            /**
             * @description Ubicación física del almacén
             * @example alacen 1, piso 2, pasillo 3
             */
            location?: string;
            /**
             * @description ID del tipo de almacenamiento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            typeStorageId: string;
        };
        Storage: {
            id: string;
            name: string;
            location: string;
            typeStorageId: string;
            isActive: boolean;
        };
        DetailedStorage: {
            id: string;
            name: string;
            location: string;
            typeStorageId: string;
            isActive: boolean;
            TypeStorage: components["schemas"]["TypeStorage"];
        };
        UpdateStorageDto: {
            /**
             * @description Nombre del almacén
             * @example Almacén Central, Almacén 1, Alacen 2
             */
            name?: string;
            /**
             * @description Ubicación física del almacén
             * @example alacen 1, piso 2, pasillo 3
             */
            location?: string;
            /**
             * @description ID del tipo de almacenamiento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            typeStorageId?: string;
        };
        DeleteStorageDto: {
            ids: string[];
        };
        CreateTypeMovementDto: {
            /**
             * @description ID opcional de la orden
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            orderId?: string;
            /**
             * @description ID opcional de referencia si fuera necesario de otra interaccion con  tipo de movimiento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            referenceId?: string;
            /**
             * @description Nombre del tipo de movimiento este referencia aun ID opcional
             * @example Venta, Compra, Devolución
             */
            name?: string;
            /**
             * @description Descripción del tipo de movimiento
             * @example Descripción opcional del tipo de movimiento
             */
            description?: string;
            /**
             * @description Estado del tipo de movimiento booleano true = activo, false = inactivo
             * @example false
             */
            state: boolean;
            /**
             * @description Identifica si es un "Ingreso" o "Salida" el campo es bolleano por defecto es null true=Ingreso, false=Salida
             * @example null
             */
            isIncoming: boolean;
            /**
             * @description Tipo externo del movimiento
             * @example Venta, Compra, Devolución
             */
            tipoExterno?: string;
        };
        TypeMovement: {
            id: string;
            orderId: string;
            referenceId: string;
            name: string;
            description: string;
            state: boolean;
            isIncoming: boolean;
            tipoExterno: string;
        };
        UpdateTypeMovementDto: {
            /**
             * @description ID opcional de la orden
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            orderId?: string;
            /**
             * @description ID opcional de referencia si fuera necesario de otra interaccion con  tipo de movimiento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            referenceId?: string;
            /**
             * @description Nombre del tipo de movimiento este referencia aun ID opcional
             * @example Venta, Compra, Devolución
             */
            name?: string;
            /**
             * @description Descripción del tipo de movimiento
             * @example Descripción opcional del tipo de movimiento
             */
            description?: string;
            /**
             * @description Estado del tipo de movimiento booleano true = activo, false = inactivo
             * @example false
             */
            state?: boolean;
            /**
             * @description Identifica si es un "Ingreso" o "Salida" el campo es bolleano por defecto es null true=Ingreso, false=Salida
             * @example null
             */
            isIncoming?: boolean;
            /**
             * @description Tipo externo del movimiento
             * @example Venta, Compra, Devolución
             */
            tipoExterno?: string;
        };
        DeleteTypeMovementDto: {
            ids: string[];
        };
        CreateMovementDto: {
            /**
             * @description ID del tipo de movimiento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            movementTypeId?: string;
            /**
             * @description ID del ingreso
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            incomingId?: string;
            /**
             * @description ID de la salida
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            outgoingId?: string;
            /**
             * @description ID del producto
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            productId: string;
            /**
             * @description Cantidad de producto que se movió
             * @example 100
             */
            quantity: number;
            /**
             * Format: date-time
             * @description Fecha en que ocurrió el evento
             * @example 2023-12-01T15:30:00Z
             */
            date: string;
            /**
             * @description Estado del movimiento
             * @example false
             */
            state: boolean;
        };
        Movement: {
            id: string;
            movementTypeId: string;
            incomingId: string;
            outgoingId: string;
            productId: string;
            quantity: number;
            /** Format: date-time */
            date: string;
            state: boolean;
        };
        UpdateMovementDto: {
            /**
             * @description ID del tipo de movimiento
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            movementTypeId?: string;
            /**
             * @description ID del ingreso
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            incomingId?: string;
            /**
             * @description ID de la salida
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            outgoingId?: string;
            /**
             * @description ID del producto
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            productId?: string;
            /**
             * @description Cantidad de producto que se movió
             * @example 100
             */
            quantity?: number;
            /**
             * Format: date-time
             * @description Fecha en que ocurrió el evento
             * @example 2023-12-01T15:30:00Z
             */
            date?: string;
            /**
             * @description Estado del movimiento
             * @example false
             */
            state?: boolean;
        };
        DeleteMovementDto: {
            ids: string[];
        };
        CreateIncomingDto: {
            /**
             * @description Nombre del ingreso
             * @example Ingreso de medicamentos, Compra, transferencia, regulacion de stock, etc.
             */
            name?: string;
            /**
             * @description Descripción del ingreso
             * @example Descripción opcional del ingreso
             */
            description?: string;
            /**
             * @description ID del almacén al que va ser ingresado
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            storageId: string;
            /**
             * Format: date-time
             * @description Fecha del ingreso
             * @example 2023-10-01T00:00:00.000Z
             */
            date: string;
            /**
             * @description Estado del ingreso
             * @example false
             */
            state: boolean;
            /**
             * @description ID de referencia
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            referenceId?: string;
        };
        Incoming: {
            id: string;
            name: string;
            description: string;
            storageId: string;
            /** Format: date-time */
            date: string;
            state: boolean;
            referenceId: string;
        };
        UpdateIncomingDto: {
            /**
             * @description Nombre del ingreso
             * @example Ingreso de medicamentos, Compra, transferencia, regulacion de stock, etc.
             */
            name?: string;
            /**
             * @description Descripción del ingreso
             * @example Descripción opcional del ingreso
             */
            description?: string;
            /**
             * @description ID del almacén al que va ser ingresado
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            storageId?: string;
            /**
             * Format: date-time
             * @description Fecha del ingreso
             * @example 2023-10-01T00:00:00.000Z
             */
            date?: string;
            /**
             * @description Estado del ingreso
             * @example false
             */
            state?: boolean;
            /**
             * @description ID de referencia
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            referenceId?: string;
        };
        DeleteIncomingDto: {
            ids: string[];
        };
        CreateIncomingDtoStorage: {
            /**
             * @description Nombre del ingreso a almacen
             * @example Ingreso de regulacion , aumento de stock, etc.
             */
            name?: string;
            /**
             * @description Descripción del ingreso
             * @example Descripción opcional del ingreso a alamacen
             */
            description?: string;
            /**
             * @description ID del almacén al que va ser ingresado
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            storageId: string;
            /**
             * Format: date-time
             * @description Fecha del ingreso
             * @example 2023-10-01T00:00:00.000Z
             */
            date: string;
            /**
             * @description Estado del ingreso
             * @example true
             */
            state: boolean;
            /**
             * @description ID de referencia puede ser un traslado, compra, etc.
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            referenceId?: string;
            /**
             * @description productos a ingresar al almacen y cantidad
             * @example [
             *       {
             *         "productId": "123e4567-e89b-12d3-a456-426614174000",
             *         "quantity": 5
             *       },
             *       {
             *         "productId": "123e4567-e89b-12d3-a456-426614174001",
             *         "quantity": 10
             *       }
             *     ]
             */
            movement: string[];
        };
        IncomingCreateResponseData: {
            incomingId: string;
            movementTypeId: string;
        };
        CreateOutgoingDto: {
            /**
             * @description Nombre de la salida
             * @example Salida de medicamentos
             */
            name?: string;
            /**
             * @description Descripción de la salida
             * @example Descripción opcional de la salida
             */
            description?: string;
            /**
             * @description ID del almacén
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            storageId: string;
            /**
             * Format: date-time
             * @description Fecha de la salida
             * @example 2023-10-01T00:00:00.000Z
             */
            date: string;
            /**
             * @description Estado de la salida
             * @example false
             */
            state: boolean;
            /**
             * @description ID de referencia
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            referenceId?: string;
        };
        Outgoing: {
            id: string;
            name: string;
            description: string;
            storageId: string;
            /** Format: date-time */
            date: string;
            state: boolean;
            referenceId: string;
        };
        UpdateOutgoingDto: {
            /**
             * @description Nombre de la salida
             * @example Salida de medicamentos
             */
            name?: string;
            /**
             * @description Descripción de la salida
             * @example Descripción opcional de la salida
             */
            description?: string;
            /**
             * @description ID del almacén
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            storageId?: string;
            /**
             * Format: date-time
             * @description Fecha de la salida
             * @example 2023-10-01T00:00:00.000Z
             */
            date?: string;
            /**
             * @description Estado de la salida
             * @example false
             */
            state?: boolean;
            /**
             * @description ID de referencia
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            referenceId?: string;
        };
        DeleteOutgoingDto: {
            ids: string[];
        };
        CreateOutgoingDtoStorage: {
            /**
             * @description Nombre de la salida de almacen
             * @example salida de transferencia , correcion de stock, etc.
             */
            name?: string;
            /**
             * @description Descripción de salida
             * @example Descripción opcional del salida de alamacen
             */
            description?: string;
            /**
             * @description ID del almacén del que va ser retirado
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            storageId: string;
            /**
             * Format: date-time
             * @description Fecha de salida
             * @example 2023-10-01T00:00:00.000Z
             */
            date: string;
            /**
             * @description Estado del salida
             * @example true
             */
            state: boolean;
            /**
             * @description ID de referencia puede ser un traslado, compra, etc.
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            referenceId?: string;
            /**
             * @description productos a retirar del almacen y cantidad
             * @example [
             *       {
             *         "productId": "123e4567-e89b-12d3-a456-426614174000",
             *         "quantity": 5
             *       },
             *       {
             *         "productId": "123e4567-e89b-12d3-a456-426614174001",
             *         "quantity": 10
             *       }
             *     ]
             */
            movement: string[];
        };
        OutgoingCreateResponseData: {
            outgoingId: string;
            movementTypeId: string;
        };
        ProductStockResponse: {
            idProduct: string;
            name: string;
            unit: string;
            price: number;
            stock: number;
            totalPrice: number;
        };
        StockByStorage: {
            idStorage: string;
            name: string;
            location: string;
            address: string;
            staff: string;
            description: string;
            stock: components["schemas"]["ProductStockResponse"][];
        };
        CreateMedicalConsultationBillingDto: {
            /**
             * @description ID de la consulta médica
             * @example 29c5e5b8-1835-42f9-ae34-217a3791ba22
             */
            consultaId: string;
            /**
             * @description Método de pago a utilizar
             * @default CASH
             * @enum {string}
             */
            paymentMethod: "CASH" | "BANK_TRANSFER" | "YAPE";
            /**
             * @description Moneda de la transacción
             * @default PEN
             */
            currency: string;
            /** @description Notas adicionales sobre la consulta */
            notes?: string;
            /**
             * @description Metadata adicional para la orden
             * @example {
             *       "additionalNotes": "Paciente requiere atención especial",
             *       "preferences": {
             *         "language": "español",
             *         "communicationMethod": "email"
             *       }
             *     }
             */
            metadata?: Record<string, never>;
        };
        ProductSaleItemDto: {
            /**
             * @description ID del producto
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            productId: string;
            /**
             * @description Cantidad del producto
             * @example 5
             */
            quantity: number;
        };
        CreateProductSaleBillingDto: {
            /**
             * @description Lista de productos a vender
             * @example [
             *       {
             *         "productId": "123e4567-e89b-12d3-a456-426614174000",
             *         "quantity": 5
             *       }
             *     ]
             */
            products: components["schemas"]["ProductSaleItemDto"][];
            /**
             * @description ID del almacén de origen
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            storageId: string;
            /**
             * @description ID de la sucursal
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            branchId: string;
            /**
             * @description Ubicación en almacén
             * @example Estante A-123
             */
            storageLocation?: string;
            /**
             * @description Número de lote
             * @example LOT-2024-001
             */
            batchNumber?: string;
            /**
             * @description ID de referencia externa
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            referenceId?: string;
            /**
             * @description Moneda (default: PEN)
             * @default PEN
             * @example PEN
             */
            currency: string;
            /**
             * @description Método de pago
             * @default CASH
             * @enum {string}
             */
            paymentMethod: "CASH" | "BANK_TRANSFER" | "YAPE";
            /**
             * @description Notas adicionales
             * @example Venta de medicamentos para paciente
             */
            notes?: string;
            /**
             * @description Metadata adicional
             * @example {
             *       "customField": "value"
             *     }
             */
            metadata?: Record<string, never>;
        };
        ProductPurchaseItemDto: {
            /**
             * @description ID del producto a comprar
             * @example ece57703-3246-4c2d-8f82-825cd239237a
             */
            productId: string;
            /**
             * @description Cantidad a comprar
             * @example 10
             */
            quantity: number;
            /**
             * @description Precio unitario del producto
             * @example 100.5
             */
            unitPrice: number;
        };
        CreateProductPurchaseBillingDto: {
            /**
             * @description Lista de productos a comprar
             * @example [
             *       {
             *         "productId": "ece57703-3246-4c2d-8f82-825cd239237a",
             *         "quantity": 10,
             *         "unitPrice": 100.5
             *       }
             *     ]
             */
            products: components["schemas"]["ProductPurchaseItemDto"][];
            /**
             * @description ID del almacén de destino
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            storageId: string;
            /**
             * @description ID del proveedor
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            supplierId: string;
            /**
             * @description ID de la sucursal
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            branchId: string;
            /**
             * @description Ubicación en almacén
             * @example Estante A-123
             */
            storageLocation?: string;
            /**
             * @description Número de lote o compra
             * @example LOT-2024-001
             */
            batchNumber?: string;
            /**
             * @description ID de referencia externa
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            referenceId?: string;
            /**
             * @description Moneda (default: PEN)
             * @default PEN
             * @example PEN
             */
            currency: string;
            /**
             * @description Método de pago
             * @default CASH
             * @enum {string}
             */
            paymentMethod: "CASH" | "BANK_TRANSFER" | "YAPE";
            /**
             * @description Notas adicionales
             * @example Compra de medicamentos de inventario
             */
            notes?: string;
            /**
             * @description Metadata adicional
             * @example {
             *       "customField": "value"
             *     }
             */
            metadata?: Record<string, never>;
        };
        CreateConsultationDto: {
            /**
             * @description ID del Servicio
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            serviceId: string;
            /**
             * @description ID del Paciente
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            pacienteId?: string;
            /**
             * @description ID del Sucursal
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            sucursalId: string;
            /**
             * @description Descripción de la consulta
             * @example Consulta médica para cirugía... etc
             */
            descripcion: string;
            /**
             * @description Fecha de la consulta
             * @example 2023-10-01T10:00:00Z
             */
            date: string;
        };
        Consultation: {
            id: string;
            serviceId: string;
            pacienteId: string;
            sucursalId: string;
            description: string;
            /** Format: date-time */
            date: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AdminController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponseDto"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AdminController_updatePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePasswordDto"];
            };
        };
        responses: {
            /** @description Password updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usuarios obtenidos correctamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description Usuario creado correctamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usuario obtenido correctamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usuario eliminado correctamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            /** @description Usuario actualizado correctamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_deactivate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteUsersDto"];
            };
        };
        responses: {
            /** @description Users deactivated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteUsersDto"];
            };
        };
        responses: {
            /** @description Users reactivated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_reactivate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User reactivated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_generatePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contraseña generada correctamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_sendNewPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendEmailDto"];
            };
        };
        responses: {
            /** @description Nueva contraseña enviada correctamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RolController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rols found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rols no found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RolController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRolDto"];
            };
        };
        responses: {
            /** @description Rol created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rol already exists and schema errors */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RolController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rol found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rol no found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RolController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rol deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rol no found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RolController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRolDto"];
            };
        };
        responses: {
            /** @description Rol updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No data to update */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RolController_removeAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteRolesDto"];
            };
        };
        responses: {
            /** @description Rols deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rols no found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RolController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteRolesDto"];
            };
        };
        responses: {
            /** @description Rols reactivated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rols no found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RolController_findAllModulesPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuditController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAuditDto"];
            };
        };
        responses: {
            /** @description Audit created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginAuthDto"];
            };
        };
        responses: {
            /** @description Login user */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Logout user */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_updatePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePasswordDto"];
            };
        };
        responses: {
            /** @description Update password */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Refresh token */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_verify: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Verify token */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_verifyQuick: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Quick token verification */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ModulesController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all modules */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ModulesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return a module */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PermissionsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return all permissions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PermissionsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return a permission */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SeedsController_initSeed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todas las órdenes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderDto"];
            };
        };
        responses: {
            /** @description Orden creada exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Datos de entrada inválidos */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la orden */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Orden encontrada */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description ID de orden inválido */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrderDto"];
            };
        };
        responses: {
            /** @description Orden actualizada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteOrdersDto"];
            };
        };
        responses: {
            /** @description Órdenes desactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"][];
                };
            };
            /** @description IDs inválidos o órdenes no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteOrdersDto"];
            };
        };
        responses: {
            /** @description Órdenes reactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"][];
                };
            };
            /** @description IDs inválidos o órdenes no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_submitDraftOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la orden borrador */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitDraftOrderDto"];
            };
        };
        responses: {
            /** @description Orden borrador confirmada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Orden no encontrada o no está en estado borrador */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_findAllByType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                type: components["schemas"]["OrderType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Orders found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_findByStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Payment status to filter by */
                status: "DRAFT" | "PENDING" | "PROCESSING" | "COMPLETED" | "CANCELLED" | "REFUNDED" | "REQUIRES_ATTENTION";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of payments with the specified status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrderController_findByStatusType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                status: components["schemas"]["OrderStatus"];
                type: components["schemas"]["OrderType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Orders found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los pagos */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePaymentDto"];
            };
        };
        responses: {
            /** @description Pago creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
            /** @description Datos de entrada inválidos */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del pago */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pago encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
            /** @description ID de pago inválido */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePaymentDto"];
            };
        };
        responses: {
            /** @description Pago actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
            /** @description Datos de entrada inválidos o pago no encontrado */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeletePaymentsDto"];
            };
        };
        responses: {
            /** @description Pagos desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"][];
                };
            };
            /** @description IDs inválidos o pagos no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pagos reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"][];
                };
            };
            /** @description IDs inválidos o pagos no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_cancelPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Payment ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CancelPaymentDto"];
            };
        };
        responses: {
            /** @description Payment cancelled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
            /** @description Invalid payment cancellation request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_processPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Payment ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProcessPaymentDto"];
            };
        };
        responses: {
            /** @description Payment processed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
            /** @description Invalid payment processing request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_verifyPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Payment ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyPaymentDto"];
            };
        };
        responses: {
            /** @description Payment verified successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
            /** @description Invalid payment verification request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_rejectPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Payment ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RejectPaymentDto"];
            };
        };
        responses: {
            /** @description Payment rejected successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
            /** @description Invalid payment rejection request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_refundPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Payment ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefundPaymentDto"];
            };
        };
        responses: {
            /** @description Payment refunded successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
            /** @description Invalid refund request or payment not eligible for refund */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PaymentController_findByStatusAndType: {
        parameters: {
            query?: {
                /** @description Payment type to filter by */
                type?: "REGULAR" | "REFUND" | "PARTIAL" | "ADJUSTMENT" | "COMPENSATION";
            };
            header?: never;
            path: {
                /** @description Payment status to filter by */
                status: "PENDING" | "PROCESSING" | "COMPLETED" | "CANCELLED" | "REFUNDED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of payments with statistics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        payments?: components["schemas"]["Payment"][];
                        stats?: {
                            totalRegular?: number;
                            totalRefunds?: number;
                            totalDiscounts?: number;
                            totalPartialPayments?: number;
                            netAmount?: number;
                            paymentCount?: number;
                            refundCount?: number;
                            discountCount?: number;
                        };
                    };
                };
            };
            /** @description Invalid status or payment type */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ClientsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all clients */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ClientsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateClientDto"];
            };
        };
        responses: {
            /** @description Client successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ClientsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get client by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ClientsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateClientDto"];
            };
        };
        responses: {
            /** @description Client successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ClientsController_deactivate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteClientsDto"];
            };
        };
        responses: {
            /** @description Clients deactivated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ClientsController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteClientsDto"];
            };
        };
        responses: {
            /** @description Clients reactivated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los servicios */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateServiceDto"];
            };
        };
        responses: {
            /** @description Servicio creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"];
                };
            };
            /** @description Datos de entrada inválidos o servicio ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del servicio */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Servicio encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Servicio no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del servicio a actualizar */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateServiceDto"];
            };
        };
        responses: {
            /** @description Servicio actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"];
                };
            };
            /** @description Datos de entrada inválidos o servicio no existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteServicesDto"];
            };
        };
        responses: {
            /** @description Servicios desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"][];
                };
            };
            /** @description IDs inválidos o servicios no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteServicesDto"];
            };
        };
        responses: {
            /** @description Servicios reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"][];
                };
            };
            /** @description IDs inválidos o servicios no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceTypeController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los tipos de servicios */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceType"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceTypeController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateServiceTypeDto"];
            };
        };
        responses: {
            /** @description Tipo de servicio creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceType"];
                };
            };
            /** @description Datos de entrada inválidos o tipo de servicio ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceTypeController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del tipo de servicio */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tipo de servicio encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceType"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tipo de servicio no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceTypeController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del tipo de servicio a actualizar */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateServiceTypeDto"];
            };
        };
        responses: {
            /** @description Tipo de servicio actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceType"];
                };
            };
            /** @description Datos de entrada inválidos o tipo de servicio no existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceTypeController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteServiceTypesDto"];
            };
        };
        responses: {
            /** @description Tipos de servicios desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceType"][];
                };
            };
            /** @description IDs inválidos o tipos de servicios no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceTypeController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteServiceTypesDto"];
            };
        };
        responses: {
            /** @description Tipos de servicios reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceType"][];
                };
            };
            /** @description IDs inválidos o tipos de servicios no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BranchController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todas las sucursales */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Branch"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BranchController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBranchDto"];
            };
        };
        responses: {
            /** @description Sucursal creada exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Branch"];
                };
            };
            /** @description Datos de entrada inválidos o sucursal ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BranchController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la sucursal */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sucursal encontrada */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Branch"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Sucursal no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BranchController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBranchDto"];
            };
        };
        responses: {
            /** @description Sucursal actualizada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Branch"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BranchController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteBranchesDto"];
            };
        };
        responses: {
            /** @description Sucursales desactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Branch"][];
                };
            };
            /** @description IDs inválidos o sucursales no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BranchController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteBranchesDto"];
            };
        };
        responses: {
            /** @description Sucursales reactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Branch"][];
                };
            };
            /** @description IDs inválidos o sucursales no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentTypeController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los tipos de cita */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentType"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentTypeController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAppointmentTypeDto"];
            };
        };
        responses: {
            /** @description Tipo de cita creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentType"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentTypeController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentType"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentTypeController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAppointmentTypeDto"];
            };
        };
        responses: {
            /** @description Tipo de cita actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentType"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentTypeController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteAppointmentTypesDto"];
            };
        };
        responses: {
            /** @description Tipos de citas desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppointmentType"][];
                };
            };
            /** @description IDs inválidos o tipos de citas no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentController_findAll: {
        parameters: {
            query?: {
                /** @description Fecha inicial para filtrar citas */
                startDate?: string;
                /** @description Fecha final para filtrar citas */
                endDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todas las citas médicas */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAppointmentDto"];
            };
        };
        responses: {
            /** @description Cita médica creada exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"];
                };
            };
            /** @description Datos de entrada inválidos o horario no disponible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Cita médica encontrada */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAppointmentDto"];
            };
        };
        responses: {
            /** @description Cita médica actualizada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentController_findByPatient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pacienteId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de citas médicas del paciente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentController_findByStaff: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personalId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de citas médicas del personal médico */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteAppointmentsDto"];
            };
        };
        responses: {
            /** @description Citas médicas desactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"][];
                };
            };
            /** @description IDs inválidos o citas médicas no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppointmentController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteAppointmentsDto"];
            };
        };
        responses: {
            /** @description Citas médicas reactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"][];
                };
            };
            /** @description IDs inválidos o citas médicas no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PacientController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los pacientes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Patient"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PacientController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePatientDto"];
            };
        };
        responses: {
            /** @description Paciente creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Datos de entrada inválidos o paciente ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PacientController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID   paciente */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paciente encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Patient"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Paciente no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PacientController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePatientDto"];
            };
        };
        responses: {
            /** @description Paciente actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PacientController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeletePatientDto"];
            };
        };
        responses: {
            /** @description Pacientes desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description IDs inválidos o pacientes no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PacientController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeletePatientDto"];
            };
        };
        responses: {
            /** @description Pacientes reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description IDs inválidos o pacientes no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecipeController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todas las recetas médicas */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prescription"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PrescriptionController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePrescriptionDto"];
            };
        };
        responses: {
            /** @description Receta médica creada exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Datos de entrada inválidos o receta ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PrescriptionController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la receta médica */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Receta médica encontrada */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prescription"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Receta médica no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PrescriptionController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePrescriptionDto"];
            };
        };
        responses: {
            /** @description Receta médica actualizada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PrescriptionController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeletePrescriptionDto"];
            };
        };
        responses: {
            /** @description Recetas médicas desactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description IDs inválidos o recetas no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PrescriptionController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeletePrescriptionDto"];
            };
        };
        responses: {
            /** @description Recetas médicas reactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description IDs inválidos o recetas no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UpdateHistoryController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todas las actualizaciones de historias médicas */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateHistory"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UpdateHistoryController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUpdateHistoryDto"];
            };
        };
        responses: {
            /** @description Actualización de historia médica creada exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Datos de entrada inválidos o actualización ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UpdateHistoryController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la actualización */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Actualización de historia médica encontrada */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateHistory"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Actualización de historia médica no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UpdateHistoryController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUpdateHistoryDto"];
            };
        };
        responses: {
            /** @description Actualización de historia médica actualizada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UpdateHistoryController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteUpdateHistoryDto"];
            };
        };
        responses: {
            /** @description Actualizaciones de historias médicas desactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description IDs inválidos o actualizaciones no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UpdateHistoryController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteUpdateHistoryDto"];
            };
        };
        responses: {
            /** @description Actualizaciones de historias médicas reactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description IDs inválidos o actualizaciones no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MedicalHistoryController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todas las historias médicas */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicalHistory"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MedicalHistoryController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMedicalHistoryDto"];
            };
        };
        responses: {
            /** @description Historia médica creada exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Datos de entrada inválidos o historia médica ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MedicalHistoryController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la historia médica */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Historia médica encontrada */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicalHistory"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Historia médica no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MedicalHistoryController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMedicalHistoryDto"];
            };
        };
        responses: {
            /** @description Historia médica actualizada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MedicalHistoryController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteMedicalHistoryDto"];
            };
        };
        responses: {
            /** @description Historias médicas desactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description IDs inválidos o historias médicas no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MedicalHistoryController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteMedicalHistoryDto"];
            };
        };
        responses: {
            /** @description Historias médicas reactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description IDs inválidos o historias médicas no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaffTypeController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los tipos de personal */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaffType"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaffTypeController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateStaffTypeDto"];
            };
        };
        responses: {
            /** @description Tipo de personal creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaffType"];
                };
            };
            /** @description Datos de entrada inválidos o tipo de personal ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaffTypeController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tipo de personal encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaffType"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaffTypeController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStaffTypeDto"];
            };
        };
        responses: {
            /** @description Tipo de personal actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaffType"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaffTypeController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteStaffTypeDto"];
            };
        };
        responses: {
            /** @description Tipos de personal eliminados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaffType"][];
                };
            };
            /** @description IDs inválidos o tipos de personal no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaffTypeController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteStaffTypeDto"];
            };
        };
        responses: {
            /** @description Tipos de personal reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaffType"][];
                };
            };
            /** @description IDs inválidos o tipos de personal no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaffController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todo el personal */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Staff"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaffController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateStaffDto"];
            };
        };
        responses: {
            /** @description Personal creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Staff"];
                };
            };
            /** @description Datos de entrada inválidos o personal ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaffController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Personal encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Staff"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaffController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStaffDto"];
            };
        };
        responses: {
            /** @description Personal actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Staff"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaffController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteStaffDto"];
            };
        };
        responses: {
            /** @description Personal eliminado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Staff"][];
                };
            };
            /** @description IDs inválidos o personal no existentes */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StaffController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteStaffDto"];
            };
        };
        responses: {
            /** @description Personal reactivado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Staff"][];
                };
            };
            /** @description IDs inválidos o personal no existentes */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los calendarios */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Calendar"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCalendarDto"];
            };
        };
        responses: {
            /** @description Calendario creado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Datos de entrada inválidos o calendario ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del calendario */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Calendario encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Calendar"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Calendario no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCalendarDto"];
            };
        };
        responses: {
            /** @description Calendario actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteCalendarDto"];
            };
        };
        responses: {
            /** @description Calendarios desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"][];
                };
            };
            /** @description IDs inválidos o calendarios no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CalendarController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteCalendarDto"];
            };
        };
        responses: {
            /** @description Calendarios reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"][];
                };
            };
            /** @description IDs inválidos o calendarios no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los eventos */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEventDto"];
            };
        };
        responses: {
            /** @description Evento creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Datos de entrada inválidos o evento ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del evento */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Evento encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Evento no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEventDto"];
            };
        };
        responses: {
            /** @description Evento actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteEventDto"];
            };
        };
        responses: {
            /** @description Eventos desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"][];
                };
            };
            /** @description IDs inválidos o eventos no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EventController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteEventDto"];
            };
        };
        responses: {
            /** @description Eventos reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"][];
                };
            };
            /** @description IDs inválidos o eventos no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecurrenceController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todas las recurrencias */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Recurrence"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecurrenceController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRecurrenceDto"];
            };
        };
        responses: {
            /** @description Recurrencia creada exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Datos de entrada inválidos o recurrencia ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecurrenceController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la recurrencia */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Recurrencia encontrada */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Recurrence"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Recurrencia no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecurrenceController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRecurrenceDto"];
            };
        };
        responses: {
            /** @description Recurrencia actualizada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecurrenceController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteRecurrenceDto"];
            };
        };
        responses: {
            /** @description Recurrencias desactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"][];
                };
            };
            /** @description IDs inválidos o recurrencias no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RecurrenceController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteRecurrenceDto"];
            };
        };
        responses: {
            /** @description Recurrencias reactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"][];
                };
            };
            /** @description IDs inválidos o recurrencias no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todas las categorías */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryDto"];
            };
        };
        responses: {
            /** @description Categoría creada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Datos de entrada inválidos o categoría ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_findAllActive: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todas las categorías activas */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la categoría */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Categoría encontrada */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Categoría no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCategoryDto"];
            };
        };
        responses: {
            /** @description Categoría actualizada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteCategoryDto"];
            };
        };
        responses: {
            /** @description Categorías desactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description IDs inválidos o categorías no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteCategoryDto"];
            };
        };
        responses: {
            /** @description Categorías reactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description IDs inválidos o categorías no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeProductController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los tipos de productos */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeProductResponse"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeProductController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTypeProductDto"];
            };
        };
        responses: {
            /** @description Tipo de producto creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Datos de entrada inválidos o tipo de producto ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeProductController_findAllActive: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los tipos de productos activos */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeProductResponse"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeProductController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del tipo de producto */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tipo de producto encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeProduct"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tipo de producto no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeProductController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTypeProductDto"];
            };
        };
        responses: {
            /** @description Tipo de producto actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeProductController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteTypeProductDto"];
            };
        };
        responses: {
            /** @description Tipos de productos desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"][];
                };
            };
            /** @description IDs inválidos o tipos de productos no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeProductController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteTypeProductDto"];
            };
        };
        responses: {
            /** @description Tipos de productos reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseApiResponse"][];
                };
            };
            /** @description IDs inválidos o tipos de productos no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los productos */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProductDto"];
            };
        };
        responses: {
            /** @description Producto creado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            /** @description Datos de entrada inválidos o producto ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_findAllWithRelations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los productos */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductWithRelations"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del producto */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Producto encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Producto no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProductDto"];
            };
        };
        responses: {
            /** @description Producto actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_findOneWithRelations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del producto */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Producto encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductWithRelations"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Producto no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteProductDto"];
            };
        };
        responses: {
            /** @description Productos desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"][];
                };
            };
            /** @description IDs inválidos o productos no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteProductDto"];
            };
        };
        responses: {
            /** @description Productos reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"][];
                };
            };
            /** @description IDs inválidos o productos no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeStorageController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los tipos de almacenamiento */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeStorage"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeStorageController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTypeStorageDto"];
            };
        };
        responses: {
            /** @description Tipo de almacenamiento creado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeStorage"];
                };
            };
            /** @description Datos de entrada inválidos o tipo de almacenamiento ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeStorageController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del tipo de almacenamiento */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tipo de almacenamiento encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeStorage"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tipo de almacenamiento no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeStorageController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTypeStorageDto"];
            };
        };
        responses: {
            /** @description Tipo de almacenamiento actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeStorage"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeStorageController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteTypeStorageDto"];
            };
        };
        responses: {
            /** @description Tipos de almacenamiento desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeStorage"][];
                };
            };
            /** @description IDs inválidos o tipos de almacenamiento no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeStorageController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteTypeStorageDto"];
            };
        };
        responses: {
            /** @description Tipos de almacenamiento reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeStorage"][];
                };
            };
            /** @description IDs inválidos o tipos de almacenamiento no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StorageController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los almacenes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Storage"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StorageController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateStorageDto"];
            };
        };
        responses: {
            /** @description Almacén creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Storage"];
                };
            };
            /** @description Datos de entrada inválidos o almacén ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StorageController_findAllWithRelations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los almacenes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailedStorage"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StorageController_findAllActive: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los almacenes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Storage"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StorageController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del almacén */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Almacén encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Storage"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Almacén no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StorageController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStorageDto"];
            };
        };
        responses: {
            /** @description Almacén actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Storage"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StorageController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteStorageDto"];
            };
        };
        responses: {
            /** @description Almacenes desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Storage"][];
                };
            };
            /** @description IDs inválidos o almacenes no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StorageController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteStorageDto"];
            };
        };
        responses: {
            /** @description Almacenes reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Storage"][];
                };
            };
            /** @description IDs inválidos o almacenes no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeMovementController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los tipos de movimiento */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeMovement"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeMovementController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTypeMovementDto"];
            };
        };
        responses: {
            /** @description Tipo de movimiento creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeMovement"];
                };
            };
            /** @description Datos de entrada inválidos o tipo de movimiento ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeMovementController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del tipo de movimiento */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tipo de movimiento encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeMovement"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tipo de movimiento no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeMovementController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTypeMovementDto"];
            };
        };
        responses: {
            /** @description Tipo de movimiento actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeMovement"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeMovementController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteTypeMovementDto"];
            };
        };
        responses: {
            /** @description Tipos de movimiento desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeMovement"][];
                };
            };
            /** @description IDs inválidos o tipos de movimiento no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TypeMovementController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteTypeMovementDto"];
            };
        };
        responses: {
            /** @description Tipos de movimiento reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TypeMovement"][];
                };
            };
            /** @description IDs inválidos o tipos de movimiento no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MovementController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los movimientos */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Movement"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MovementController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMovementDto"];
            };
        };
        responses: {
            /** @description Movimiento creado exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Movement"];
                };
            };
            /** @description Datos de entrada inválidos o movimiento ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MovementController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del movimiento */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Movimiento encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Movement"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Movimiento no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MovementController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMovementDto"];
            };
        };
        responses: {
            /** @description Movimiento actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Movement"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MovementController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteMovementDto"];
            };
        };
        responses: {
            /** @description Movimientos desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Movement"][];
                };
            };
            /** @description IDs inválidos o movimientos no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MovementController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteMovementDto"];
            };
        };
        responses: {
            /** @description Movimientos reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Movement"][];
                };
            };
            /** @description IDs inválidos o movimientos no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    IncomingController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todos los ingresos */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Incoming"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    IncomingController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateIncomingDto"];
            };
        };
        responses: {
            /** @description Ingreso creado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Incoming"];
                };
            };
            /** @description Datos de entrada inválidos o ingreso ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    IncomingController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del ingreso */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ingreso encontrado */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Incoming"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ingreso no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    IncomingController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateIncomingDto"];
            };
        };
        responses: {
            /** @description Ingreso actualizado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Incoming"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    IncomingController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteIncomingDto"];
            };
        };
        responses: {
            /** @description Ingresos desactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Incoming"][];
                };
            };
            /** @description IDs inválidos o ingresos no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    IncomingController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteIncomingDto"];
            };
        };
        responses: {
            /** @description Ingresos reactivados exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Incoming"][];
                };
            };
            /** @description IDs inválidos o ingresos no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    IncomingController_createIncoming: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateIncomingDtoStorage"];
            };
        };
        responses: {
            /** @description Ingreso a almacen creado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IncomingCreateResponseData"];
                };
            };
            /** @description Datos de entrada inválidos o ingreso ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OutgoingController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todas las salidas */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Outgoing"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OutgoingController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOutgoingDto"];
            };
        };
        responses: {
            /** @description Salida creada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Outgoing"];
                };
            };
            /** @description Datos de entrada inválidos o salida ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OutgoingController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la salida */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Salida encontrada */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Outgoing"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Salida no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OutgoingController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOutgoingDto"];
            };
        };
        responses: {
            /** @description Salida actualizada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Outgoing"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OutgoingController_deleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteOutgoingDto"];
            };
        };
        responses: {
            /** @description Salidas desactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Outgoing"][];
                };
            };
            /** @description IDs inválidos o salidas no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OutgoingController_reactivateAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteOutgoingDto"];
            };
        };
        responses: {
            /** @description Salidas reactivadas exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Outgoing"][];
                };
            };
            /** @description IDs inválidos o salidas no existen */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OutgoingController_createOutgoing: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOutgoingDtoStorage"];
            };
        };
        responses: {
            /** @description Salida de almacen creada exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OutgoingCreateResponseData"];
                };
            };
            /** @description Datos de salida inválidos o salida ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StockController_getStockByProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del producto */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Stock de un producto en todos los almacenes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockByStorage"][];
                };
            };
        };
    };
    StockController_getStockForAllStorages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Stock de todos los productos en todos los almacenes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockByStorage"][];
                };
            };
        };
    };
    StockController_getStockByStorage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del almacén */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Stock de todos los productos en un almacén */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockByStorage"][];
                };
            };
        };
    };
    StockController_getStockByStorageProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID del almacén */
                storageId: string;
                /** @description ID del producto */
                productId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Stock de un producto en un almacén */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockByStorage"][];
                };
            };
        };
    };
    BillingController_createMedicalConsultationOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMedicalConsultationBillingDto"];
            };
        };
        responses: {
            /** @description Medical consultation order created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BillingController_createProductSaleOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProductSaleBillingDto"];
            };
        };
        responses: {
            /** @description Product sale order created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BillingController_createProductPurchaseOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProductPurchaseBillingDto"];
            };
        };
        responses: {
            /** @description Product purchase order created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConsultationController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lista de todas las consultas */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consultation"][];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConsultationController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateConsultationDto"];
            };
        };
        responses: {
            /** @description Consulta creada exitosamente */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consultation"];
                };
            };
            /** @description Datos de entrada inválidos o consulta ya existe */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConsultationController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID de la consulta */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Consulta encontrada */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Consultation"];
                };
            };
            /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - No autorizado para realizar esta operación */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Consulta no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
