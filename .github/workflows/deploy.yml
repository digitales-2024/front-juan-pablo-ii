name: Deploy Service

on:
  workflow_run:
    workflows: ["Build Docker Image"]
    types:
      - completed
    branches:
      - staging-acide

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment:
      name: 'staging'
    steps:
      - name: Download workflow artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build.yml
          workflow_conclusion: success
          name: github-sha
          path: .

      - name: Set GitHub SHA
        run: |
          echo "GITHUB_SHA=$(cat github-sha.txt)" >> $GITHUB_ENV

      - name: Validate environment variables
        run: |
          if [ -z "${{ vars.PROJECT_NAME }}" ]; then
            echo "Error: PROJECT_NAME must be defined in environment variables"
            exit 1
          fi
          if [ -z "${{ vars.SERVICE_TYPE }}" ]; then
            echo "Error: SERVICE_TYPE must be defined in environment variables"
            exit 1
          fi
          if [ -z "${{ vars.DOCKERHUB_USERNAME }}" ]; then
            echo "Error: DOCKERHUB_USERNAME must be defined in environment variables"
            exit 1
          fi

      - name: Set environment variables
        run: |
          # Construir el nombre base del servicio
          BASE_NAME="${{ vars.SERVICE_TYPE }}-${{ vars.PROJECT_NAME }}"

          # Configurar variables para staging-acide
          echo "SERVICE_NAME=${BASE_NAME}-stage" >> "${GITHUB_ENV}"
          echo "ENV_TAG=stage" >> "${GITHUB_ENV}"
          echo "ENVIRONMENT_SUFFIX=-staging" >> "${GITHUB_ENV}"
          echo "SSH_HOST=${{ vars.STAGE_SERVER_HOST }}" >> "${GITHUB_ENV}"
          echo "SSH_USERNAME=${{ vars.STAGE_SSH_USERNAME }}" >> "${GITHUB_ENV}"
          echo "SSH_PORT=${{ vars.STAGE_SSH_PORT || 22 }}" >> "${GITHUB_ENV}"
          echo "SSH_KEY=${{ vars.STAGE_SSH_PRIVATE_KEY }}" >> "${GITHUB_ENV}"

          echo "REPO_NAME=${BASE_NAME}${ENVIRONMENT_SUFFIX}" >> "${GITHUB_ENV}"
          echo "DOCKER_TAG=${{ vars.DOCKERHUB_USERNAME }}/${BASE_NAME}${ENVIRONMENT_SUFFIX}:${{ env.GITHUB_SHA }}" >> "${GITHUB_ENV}"
          echo "ESCAPED_DOCKER_TAG=${{ vars.DOCKERHUB_USERNAME }}\\\\/${BASE_NAME}${ENVIRONMENT_SUFFIX}:${{ env.GITHUB_SHA }}" >> "${GITHUB_ENV}"
          echo "ESCAPED_IMAGE_NAME=${{ vars.DOCKERHUB_USERNAME }}\\\\/${BASE_NAME}${ENVIRONMENT_SUFFIX}" >> "${GITHUB_ENV}"

      - name: Configure SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ env.SSH_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace
          config: |
            Host deployment-target
              HostName ${{ env.SSH_HOST }}
              User ${{ env.SSH_USERNAME }}
              Port ${{ env.SSH_PORT }}
              StrictHostKeyChecking no

      - name: Update docker-compose on server
        run: |
          REMOTE_SCRIPT=$(cat << 'EOF'
            # Pull new image
            docker pull "__DOCKER_TAG__"

            # Update the service without affecting others
            cd ${{ vars.SERVICE_HOME }}

            # Debug: Mostrar permisos
            echo "Checking permissions..."
            ls -la

            # Verificar si el archivo existe
            if [ ! -f "docker-compose.__ENV_TAG__.yml" ]; then
              echo "Error: docker-compose.__ENV_TAG__.yml not found"
              ls -la
              pwd
              exit 1
            fi

            # Hacer backup del archivo
            cp "docker-compose.__ENV_TAG__.yml" "docker-compose.__ENV_TAG__.yml.bak"

            # Actualizar la imagen
            sed -i.tmp -r "s|image: __ESCAPED_IMAGE_NAME__:.+$|image: __ESCAPED_DOCKER_TAG__|" docker-compose.__ENV_TAG__.yml

            # Verificar la actualizaciÃ³n
            if ! grep -A 2 "container_name: __SERVICE_NAME__" "docker-compose.__ENV_TAG__.yml" | grep -q "image: __ESCAPED_DOCKER_TAG__"; then
              echo "Error: Image update failed"
              mv "docker-compose.__ENV_TAG__.yml.bak" "docker-compose.__ENV_TAG__.yml"
              exit 1
            fi

            # Limpiar archivos temporales
            rm -f "docker-compose.__ENV_TAG__.yml.tmp" "docker-compose.__ENV_TAG__.yml.bak"

            # Restart service
            if command -v docker-compose &> /dev/null; then
              docker-compose -f "docker-compose.__ENV_TAG__.yml" up -d --no-deps __SERVICE_NAME__
            else
              docker compose -f "docker-compose.__ENV_TAG__.yml" up -d --no-deps __SERVICE_NAME__
            fi

            # Cleanup old images
            docker images -q --filter "dangling=true" | xargs -r docker rmi

            # Debug: Verificar estado final
            echo "Service status:"
            if command -v docker-compose &> /dev/null; then
              docker-compose -f "docker-compose.__ENV_TAG__.yml" ps __SERVICE_NAME__
            else
              docker compose -f "docker-compose.__ENV_TAG__.yml" ps __SERVICE_NAME__
            fi
          EOF
          )

          # Reemplazar placeholders
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__DOCKER_TAG__/${{ env.DOCKER_TAG }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__ESCAPED_DOCKER_TAG__/${{ env.ESCAPED_DOCKER_TAG }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__ENV_TAG__/${{ env.ENV_TAG }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__SERVICE_NAME__/${{ env.SERVICE_NAME }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__ESCAPED_IMAGE_NAME__/${{ env.ESCAPED_IMAGE_NAME }}}"

          echo "$REMOTE_SCRIPT" | ssh deployment-target bash
