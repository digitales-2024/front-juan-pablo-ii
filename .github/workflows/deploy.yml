name: Deploy Service

on:
  push:
    branches: [develop, stage, main]
    tags: ['v*.*.*']
    paths-ignore:
      - '**.md'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Validate environment variables
        run: |
          if [ -z "${{ vars.PROJECT_NAME }}" ]; then
            echo "Error: PROJECT_NAME must be defined in environment variables"
            exit 1
          fi
          if [ -z "${{ vars.SERVICE_TYPE }}" ]; then
            echo "Error: SERVICE_TYPE must be defined in environment variables"
            exit 1
          fi

      - name: Set environment variables
        run: |
          # Construir el nombre base del servicio
          BASE_NAME="${{ vars.SERVICE_TYPE }}-${{ vars.PROJECT_NAME }}"

          # Configurar variables según el ambiente
          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
            echo "SERVICE_NAME=${BASE_NAME}" >> "${GITHUB_ENV}"
            echo "ENV_TAG=prod" >> "${GITHUB_ENV}"
          elif [[ "${{ github.ref }}" == 'refs/heads/stage' ]]; then
            echo "SERVICE_NAME=${BASE_NAME}-stage" >> "${GITHUB_ENV}"
            echo "ENV_TAG=stage" >> "${GITHUB_ENV}"
          else
            echo "SERVICE_NAME=${BASE_NAME}-dev" >> "${GITHUB_ENV}"
            echo "ENV_TAG=dev" >> "${GITHUB_ENV}"
          fi

          # Configurar nombre del repo para Docker
          echo "REPO_NAME=${BASE_NAME}" >> "${GITHUB_ENV}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Clean Docker cache
        run: |
          docker builder prune -af
          docker image prune -af

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          build-args: |
            NEXT_PUBLIC_BACKEND_URL=${{ vars.SERVICE_TYPE == 'front' && vars.NEXT_PUBLIC_BACKEND_URL || '' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest-${{ env.ENV_TAG }}
          no-cache: true
          provenance: false
          sbom: false

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    steps:
      - name: Set environment variables
        run: |
          # Construir el nombre base del servicio
          BASE_NAME="${{ vars.SERVICE_TYPE }}-${{ vars.PROJECT_NAME }}"

          # Configurar variables según el ambiente
          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
            echo "SERVICE_NAME=${BASE_NAME}" >> "${GITHUB_ENV}"
            echo "ENV_TAG=prod" >> "${GITHUB_ENV}"
          elif [[ "${{ github.ref }}" == 'refs/heads/stage' ]]; then
            echo "SERVICE_NAME=${BASE_NAME}-stage" >> "${GITHUB_ENV}"
            echo "ENV_TAG=stage" >> "${GITHUB_ENV}"
          else
            echo "SERVICE_NAME=${BASE_NAME}-dev" >> "${GITHUB_ENV}"
            echo "ENV_TAG=dev" >> "${GITHUB_ENV}"
          fi

          echo "REPO_NAME=${BASE_NAME}" >> "${GITHUB_ENV}"
          echo "DOCKER_TAG=${{ secrets.DOCKERHUB_USERNAME }}/${BASE_NAME}:${{ github.sha }}" >> "${GITHUB_ENV}"
          echo "ESCAPED_DOCKER_TAG=${{ secrets.DOCKERHUB_USERNAME }}\\\\/${BASE_NAME}:${{ github.sha }}" >> "${GITHUB_ENV}"
          echo "ESCAPED_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}\\\\/${BASE_NAME}" >> "${GITHUB_ENV}"

      - name: Configure SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ github.ref == 'refs/heads/main' && secrets.PROD_SSH_PRIVATE_KEY || secrets.STAGE_SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace
          config: |
            Host deployment-target
              HostName ${{ github.ref == 'refs/heads/main' && secrets.PROD_SERVER_HOST || secrets.STAGE_SERVER_HOST }}
              User ${{ github.ref == 'refs/heads/main' && secrets.PROD_SSH_USERNAME || secrets.STAGE_SSH_USERNAME }}
              Port ${{ github.ref == 'refs/heads/main' && secrets.PROD_SSH_PORT || secrets.STAGE_SSH_PORT || 22 }}
              StrictHostKeyChecking no

      - name: Update docker-compose on server
        run: |
          REMOTE_SCRIPT=$(cat << 'EOF'
            # Pull new image
            docker pull "__DOCKER_TAG__"

            # Update the service without affecting others
            cd ${{ vars.SERVICE_HOME }}

            # Debug: Mostrar permisos
            echo "Checking permissions..."
            ls -la

            # Verificar si el archivo existe
            if [ ! -f "docker-compose.__ENV_TAG__.yml" ]; then
              echo "Error: docker-compose.__ENV_TAG__.yml not found"
              ls -la
              pwd
              exit 1
            fi

            # Hacer backup del archivo
            cp "docker-compose.__ENV_TAG__.yml" "docker-compose.__ENV_TAG__.yml.bak"

            # Actualizar la imagen
            sed -i.tmp -r "s|image: __ESCAPED_IMAGE_NAME__:.+$|image: __ESCAPED_DOCKER_TAG__|" docker-compose.__ENV_TAG__.yml

            # Verificar la actualización
            if ! grep -A 2 "container_name: __SERVICE_NAME__" "docker-compose.__ENV_TAG__.yml" | grep -q "image: __ESCAPED_DOCKER_TAG__"; then
              echo "Error: Image update failed"
              mv "docker-compose.__ENV_TAG__.yml.bak" "docker-compose.__ENV_TAG__.yml"
              exit 1
            fi

            # Limpiar archivos temporales
            rm -f "docker-compose.__ENV_TAG__.yml.tmp" "docker-compose.__ENV_TAG__.yml.bak"

            # Restart service
            if command -v docker-compose &> /dev/null; then
              docker-compose -f "docker-compose.__ENV_TAG__.yml" up -d --no-deps __SERVICE_NAME__
            else
              docker compose -f "docker-compose.__ENV_TAG__.yml" up -d --no-deps __SERVICE_NAME__
            fi

            # Cleanup old images
            docker images -q --filter "dangling=true" | xargs -r docker rmi

            # Debug: Verificar estado final
            echo "Service status:"
            if command -v docker-compose &> /dev/null; then
              docker-compose -f "docker-compose.__ENV_TAG__.yml" ps __SERVICE_NAME__
            else
              docker compose -f "docker-compose.__ENV_TAG__.yml" ps __SERVICE_NAME__
            fi
          EOF
          )

          # Reemplazar placeholders
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__DOCKER_TAG__/${{ env.DOCKER_TAG }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__ESCAPED_DOCKER_TAG__/${{ env.ESCAPED_DOCKER_TAG }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__ENV_TAG__/${{ env.ENV_TAG }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__SERVICE_NAME__/${{ env.SERVICE_NAME }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__ESCAPED_IMAGE_NAME__/${{ env.ESCAPED_IMAGE_NAME }}}"

          echo "$REMOTE_SCRIPT" | ssh deployment-target bash
